# Intelligent Climate Optimization - Stillsuit Environmental Control
# Advanced climate management with predictive algorithms and resource conservation

alias: "Intelligent Climate Optimization System"
description: "AI-powered climate control with desert survival principles and energy efficiency"
mode: parallel
max: 5

trigger:
  # Temperature threshold breaches
  - platform: template
    value_template: >
      {% set current_temp = state_attr('weather.home', 'temperature') or 72 %}
      {% set high_threshold = states('input_number.temperature_threshold_high') | float(78) %}
      {% set low_threshold = states('input_number.temperature_threshold_low') | float(68) %}
      {{ current_temp > high_threshold or current_temp < low_threshold }}
    for:
      minutes: 5
    id: "temperature_threshold_breach"

  # Occupancy changes
  - platform: state
    entity_id: binary_sensor.house_occupied
    id: "occupancy_change"

  # Energy optimization triggers
  - platform: numeric_state
    entity_id: sensor.energy_independence_score
    below: 60
    for:
      minutes: 10
    id: "energy_conservation_needed"

  # Time-based optimization
  - platform: time_pattern
    hours: "/1"  # Every hour
    id: "hourly_optimization"

  # Weather-based adjustments
  - platform: template
    value_template: >
      {% set humidity = state_attr('weather.home', 'humidity') or 50 %}
      {{ humidity < 30 or humidity > 70 }}
    for:
      minutes: 15
    id: "humidity_optimization"

  # Climate mode changes
  - platform: state
    entity_id: input_select.climate_mode
    id: "climate_mode_change"

condition:
  # Only run if climate automation is enabled
  - condition: state
    entity_id: input_boolean.climate_automation_enabled
    state: "on"

action:
  # Log climate optimization event
  - service: logbook.log
    data:
      name: "Stillsuit Climate Control"
      message: "Climate optimization triggered: {{ trigger.id }}"

  # Temperature Threshold Management
  - if:
      - condition: trigger
        id: "temperature_threshold_breach"
    then:
      - variables:
          current_temp: "{{ state_attr('weather.home', 'temperature') or 72 }}"
          high_threshold: "{{ states('input_number.temperature_threshold_high') | float(78) }}"
          low_threshold: "{{ states('input_number.temperature_threshold_low') | float(68) }}"
          occupancy: "{{ is_state('binary_sensor.house_occupied', 'on') }}"
          energy_score: "{{ states('sensor.energy_independence_score') | float(80) }}"
          
      # High Temperature Response
      - if:
          - condition: template
            value_template: "{{ current_temp > high_threshold }}"
        then:
          # Activate cooling measures based on energy availability
          - if:
              - condition: template
                value_template: "{{ energy_score > 70 }}"
            then:
              # Full cooling with good energy situation
              - service: climate.set_temperature
                data:
                  entity_id: climate.home
                  temperature: "{{ high_threshold - 2 }}"
                  
              - service: fan.turn_on
                target:
                  area_id: ["living_room", "bedroom", "office"]
                data:
                  percentage: 75
            else:
              # Energy-conscious cooling
              - service: climate.set_temperature
                data:
                  entity_id: climate.home  
                  temperature: "{{ high_threshold - 1 }}"
                  
              # Use strategic natural cooling
              - if:
                  - condition: template
                    value_template: "{{ now().hour >= 20 or now().hour <= 6 }}"
                then:
                  # Night cooling - open vents, strategic fans
                  - service: fan.turn_on
                    target:
                      area_id: "living_room"
                    data:
                      percentage: 50
                      
          # Notify of cooling action
          - service: notify.mobile_app_phone
            data:
              title: "🌡️ Stillsuit: Cooling Activated"
              message: >
                Temperature {{ current_temp }}°F exceeds threshold {{ high_threshold }}°F.
                {% if energy_score > 70 %}Full cooling measures engaged.
                {% else %}Energy-conscious cooling initiated. Independence: {{ energy_score }}%{% endif %}

      # Low Temperature Response  
      - if:
          - condition: template
            value_template: "{{ current_temp < low_threshold }}"
        then:
          # Heating optimization based on occupancy and energy
          - if:
              - condition: template
                value_template: "{{ occupancy and energy_score > 60 }}"
            then:
              # Occupied heating
              - service: climate.set_temperature
                data:
                  entity_id: climate.home
                  temperature: "{{ low_threshold + 2 }}"
            else:
              # Minimal heating when unoccupied or low energy
              - service: climate.set_temperature
                data:
                  entity_id: climate.home
                  temperature: "{{ low_threshold + 1 }}"
                  
          # Notify of heating action
          - service: notify.mobile_app_phone
            data:
              title: "🔥 Stillsuit: Heating Activated"
              message: >
                Temperature {{ current_temp }}°F below threshold {{ low_threshold }}°F.
                Heating to {{ low_threshold + (2 if occupancy and energy_score > 60 else 1) }}°F.

  # Occupancy-Based Climate Adjustment
  - if:
      - condition: trigger
        id: "occupancy_change"
    then:
      - variables:
          is_occupied: "{{ trigger.to_state.state == 'on' }}"
          climate_mode: "{{ states('input_select.climate_mode') }}"
          
      - if:
          - condition: template
            value_template: "{{ is_occupied }}"
        then:
          # House occupied - comfort mode
          - service: climate.set_preset_mode
            data:
              entity_id: climate.home
              preset_mode: "comfort"
              
          - service: tts.speak
            data:
              entity_id: media_player.alexa_echo
              message: "Welcome home, noble Atreides. Climate systems optimizing for your comfort."
        else:
          # House empty - energy saving mode
          - service: climate.set_preset_mode
            data:
              entity_id: climate.home
              preset_mode: "away"
              
          # Reduce temperature thresholds when away
          - service: input_number.set_value
            target:
              entity_id: input_number.temperature_threshold_high
            data:
              value: "{{ states('input_number.temperature_threshold_high') | float(78) + 3 }}"
              
          - service: input_number.set_value
            target:
              entity_id: input_number.temperature_threshold_low
            data:
              value: "{{ states('input_number.temperature_threshold_low') | float(68) - 3 }}"

  # Energy Conservation Response
  - if:
      - condition: trigger
        id: "energy_conservation_needed"
    then:
      - variables:
          independence_score: "{{ states('sensor.energy_independence_score') | float(50) }}"
          
      # Implement aggressive energy conservation
      - service: input_select.select_option
        target:
          entity_id: input_select.climate_mode
        data:
          option: "Desert Conservation"
          
      # Adjust thresholds for maximum efficiency
      - service: input_number.set_value
        target:
          entity_id: input_number.temperature_threshold_high
        data:
          value: "{{ states('input_number.temperature_threshold_high') | float(78) + 4 }}"
          
      - service: input_number.set_value
        target:
          entity_id: input_number.temperature_threshold_low
        data:
          value: "{{ states('input_number.temperature_threshold_low') | float(68) - 4 }}"
          
      # Turn off non-essential climate controls
      - service: fan.turn_off
        target:
          area_id: ["bedroom", "office", "guest_bathroom"]
          
      - service: notify.mobile_app_phone
        data:
          title: "⚡ Desert Conservation: Climate Restricted"
          message: >
            Energy independence critically low: {{ independence_score }}%
            Climate thresholds expanded for maximum conservation.
            The spice must flow, but resources must be preserved.

  # Hourly Optimization Cycle
  - if:
      - condition: trigger
        id: "hourly_optimization"
    then:
      - variables:
          current_hour: "{{ now().hour }}"
          solar_production: "{{ states('sensor.solar_harvester_production') | float(0) }}"
          energy_consumption: "{{ states('sensor.holtzman_energy_consumption') | float(100) }}"
          
      # Peak solar optimization (10 AM - 4 PM)
      - if:
          - condition: template
            value_template: "{{ current_hour >= 10 and current_hour <= 16 }}"
          - condition: template
            value_template: "{{ solar_production > energy_consumption * 1.5 }}"
        then:
          # Pre-cool/pre-heat during peak solar
          - service: climate.set_temperature
            data:
              entity_id: climate.home
              temperature: >
                {% if now().month in [6, 7, 8] %}
                  {{ states('input_number.temperature_threshold_low') | float(68) - 1 }}
                {% else %}
                  {{ states('input_number.temperature_threshold_high') | float(78) + 1 }}
                {% endif %}
                
      # Evening optimization (6 PM - 10 PM)
      - if:
          - condition: template
            value_template: "{{ current_hour >= 18 and current_hour <= 22 }}"
        then:
          # Return to normal comfort settings
          - service: climate.set_preset_mode
            data:
              entity_id: climate.home
              preset_mode: "comfort"

  # Humidity Optimization
  - if:
      - condition: trigger
        id: "humidity_optimization"
    then:
      - variables:
          humidity: "{{ state_attr('weather.home', 'humidity') or 50 }}"
          
      - if:
          - condition: template
            value_template: "{{ humidity < 30 }}"
        then:
          # Low humidity - desert conditions
          - service: notify.mobile_app_phone
            data:
              title: "🏜️ Desert Alert: Low Humidity"
              message: >
                Humidity at {{ humidity }}% - activating moisture conservation protocols.
                Stillsuit efficiency maximized.
                
          # Reduce cooling to preserve moisture
          - service: climate.set_temperature
            data:
              entity_id: climate.home
              temperature: "{{ states('input_number.temperature_threshold_high') | float(78) + 1 }}"
              
      - if:
          - condition: template
            value_template: "{{ humidity > 70 }}"
        then:
          # High humidity - dehumidification needed
          - service: climate.set_hvac_mode
            data:
              entity_id: climate.home
              hvac_mode: "dry"
              
          - service: notify.mobile_app_phone
            data:
              title: "💧 Humidity Control: Dehumidifying"
              message: >
                High humidity detected: {{ humidity }}%
                Activating dehumidification to prevent moisture issues.

  # Climate Mode Change Response
  - if:
      - condition: trigger
        id: "climate_mode_change"
    then:
      - variables:
          new_mode: "{{ trigger.to_state.state }}"
          
      - choose:
          # Desert Conservation Mode
          - conditions:
              - condition: template
                value_template: "{{ new_mode == 'Desert Conservation' }}"
            sequence:
              - service: climate.set_preset_mode
                data:
                  entity_id: climate.home
                  preset_mode: "eco"
                  
              - service: tts.speak
                data:
                  entity_id: media_player.alexa_echo
                  message: "Desert conservation protocols activated. Every drop of moisture shall be preserved. The way of the desert is the way of survival."
                  
          # Storm Protocol Mode
          - conditions:
              - condition: template
                value_template: "{{ new_mode == 'Storm Protocol' }}"
            sequence:
              - service: climate.set_preset_mode
                data:
                  entity_id: climate.home
                  preset_mode: "away"
                  
              # Seal the sietch - turn off ventilation
              - service: fan.turn_off
                target:
                  area_id: ["living_room", "kitchen", "office", "bedroom"]
                  
              - service: tts.speak
                data:
                  entity_id: media_player.alexa_echo
                  message: "Storm protocol engaged. Sealing the sietch against the desert's fury. All systems to minimal power."

  # Always update climate analytics
  - delay: "00:00:10"
  - service: homeassistant.update_entity
    target:
      entity_id: 
        - sensor.energy_efficiency_rating
        - sensor.water_reclamation_efficiency
        - sensor.sietch_operational_intelligence