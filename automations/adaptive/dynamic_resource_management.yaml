# Dynamic Resource Management System
# Smart resource optimization with predictive load balancing
#
# Pattern 4: Dynamic Resource Management
# - Uses Harvester Efficiency to schedule high-power activities
# - Uses Water Conservation Index to throttle non-essential systems  
# - Uses Spice Production Level to prioritize automation execution
# - Load balancing based on System Response Time

alias: "Dynamic Resource Manager - Intelligent Load Balancing"
description: "Advanced resource optimization with predictive power management and adaptive throttling"
trigger:
  # Harvester efficiency optimization triggers
  - platform: numeric_state
    entity_id: sensor.harvester_efficiency
    above: 90
    for:
      minutes: 10
    id: "high_efficiency_window"
    
  - platform: numeric_state
    entity_id: sensor.harvester_efficiency
    below: 70
    for:
      minutes: 15
    id: "efficiency_degraded"

  # Conservation-based resource throttling
  - platform: numeric_state
    entity_id: sensor.water_conservation_index
    below: 60
    id: "conservation_throttling_needed"
    
  - platform: numeric_state
    entity_id: sensor.water_conservation_index
    above: 85
    for:
      minutes: 20
    id: "conservation_surplus"

  # Spice production priority management
  - platform: numeric_state
    entity_id: sensor.spice_production_level
    above: 110
    for:
      minutes: 5
    id: "peak_production_achieved"
    
  - platform: numeric_state
    entity_id: sensor.spice_production_level
    below: 80
    for:
      minutes: 30
    id: "production_below_target"

  # System response time optimization
  - platform: numeric_state
    entity_id: sensor.system_response_time
    below: 70
    for:
      minutes: 10
    id: "system_overload_detected"
    
  - platform: numeric_state
    entity_id: sensor.system_response_time
    above: 95
    for:
      minutes: 5
    id: "system_optimal_performance"

  # Predictive resource scheduling
  - platform: time_pattern
    minutes: "/15"  # Every 15 minutes
    id: "resource_optimization_cycle"

condition:
  # Multi-factor resource availability assessment
  - condition: template
    value_template: >-
      {% set harvester = states('sensor.harvester_efficiency') | float %}
      {% set conservation = states('sensor.water_conservation_index') | float %}
      {% set production = states('sensor.spice_production_level') | float %}
      {% set response = states('sensor.system_response_time') | float %}
      {% set health = states('sensor.sietch_health_score') | float %}
      {% set survival = states('sensor.desert_survival_status') %}
      
      {# Calculate resource availability score #}
      {% set harvester_weight = 0.25 %}
      {% set conservation_weight = 0.20 %}
      {% set production_weight = 0.25 %}
      {% set response_weight = 0.20 %}
      {% set health_weight = 0.10 %}
      
      {% set availability_score = 
        (harvester * harvester_weight) + 
        (conservation * conservation_weight) + 
        (production * production_weight) + 
        (response * response_weight) +
        (health * health_weight) %}
      
      {# Emergency override for critical survival status #}
      {% if survival == 'Critical' %}
        {{ true }}
      {% else %}
        {{ availability_score > 50 }}
      {% endif %}

action:
  # Sophisticated resource management decision tree
  - choose:
      # High Efficiency Resource Utilization
      - conditions:
          - condition: trigger
            id: "high_efficiency_window"
        sequence:
          # Schedule high-power activities during peak efficiency
          - service: script.turn_on
            target:
              entity_id: script.high_power_activity_scheduler
            data:
              variables:
                efficiency_level: "{{ states('sensor.harvester_efficiency') | float }}"
                available_power_window: >-
                  {% set conservation = states('sensor.water_conservation_index') | float %}
                  {% set response = states('sensor.system_response_time') | float %}
                  {% if conservation > 80 and response > 90 %}
                    high
                  {% elif conservation > 65 and response > 80 %}
                    medium
                  {% else %}
                    low
                  {% endif %}
                priority_systems: >-
                  [
                    {% if states('sensor.spice_production_level') | float < 90 %}"automation_optimization",{% endif %}
                    {% if states('sensor.sietch_health_score') | float < 80 %}"system_maintenance",{% endif %}
                    {% if states('sensor.atmospheric_conditions') | float < 85 %}"air_circulation",{% endif %}
                    "backup_operations"
                  ]

          # Boost automation execution during high efficiency
          - service: input_number.set_value
            target:
              entity_id: input_number.automation_execution_priority
            data:
              value: >-
                {% set efficiency = states('sensor.harvester_efficiency') | float %}
                {% set base_priority = 50 %}
                {% set efficiency_boost = (efficiency - 90) * 5 %}
                {{ [base_priority + efficiency_boost, 100] | min }}

      # Efficiency Degradation Response
      - conditions:
          - condition: trigger
            id: "efficiency_degraded"
        sequence:
          # Throttle non-essential systems
          - service: script.turn_on
            target:
              entity_id: script.resource_throttling_protocol
            data:
              variables:
                efficiency_level: "{{ states('sensor.harvester_efficiency') | float }}"
                conservation_pressure: "{{ states('sensor.water_conservation_index') | float }}"
                throttling_severity: >-
                  {% set efficiency = states('sensor.harvester_efficiency') | float %}
                  {% if efficiency < 50 %}
                    aggressive
                  {% elif efficiency < 60 %}
                    moderate
                  {% else %}
                    light
                  {% endif %}

          # Delay non-critical automations
          - service: automation.turn_off
            target:
              entity_id:
                - automation.non_essential_lighting
                - automation.comfort_adjustments
                - automation.entertainment_system_control

          # Set resource conservation mode
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.resource_conservation_mode

      # Conservation Throttling Protocol
      - conditions:
          - condition: trigger
            id: "conservation_throttling_needed"
        sequence:
          # Implement graduated throttling based on conservation index
          - service: script.turn_on
            target:
              entity_id: script.conservation_based_throttling
            data:
              variables:
                conservation_level: "{{ states('sensor.water_conservation_index') | float }}"
                system_priority_matrix: >-
                  {% set conservation = states('sensor.water_conservation_index') | float %}
                  {% set survival = states('sensor.desert_survival_status') %}
                  {% if survival == 'Critical' or conservation < 40 %}
                    critical_only
                  {% elif conservation < 50 %}
                    essential_plus_security
                  {% else %}
                    essential_plus_comfort
                  {% endif %}

          # Dynamic device power management
          - service: switch.turn_off
            target:
              entity_id: >-
                {% set conservation = states('sensor.water_conservation_index') | float %}
                {% set switches_to_disable = [] %}
                {% if conservation < 50 %}
                  {% set switches_to_disable = switches_to_disable + ['switch.decorative_lighting', 'switch.entertainment_devices'] %}
                {% endif %}
                {% if conservation < 40 %}
                  {% set switches_to_disable = switches_to_disable + ['switch.non_essential_outlets'] %}
                {% endif %}
                {{ switches_to_disable }}

      # Conservation Surplus - Resource Liberation
      - conditions:
          - condition: trigger
            id: "conservation_surplus"
        sequence:
          # Enable previously throttled systems
          - service: automation.turn_on
            target:
              entity_id:
                - automation.non_essential_lighting
                - automation.comfort_adjustments
                - automation.entertainment_system_control

          # Boost system capabilities
          - service: input_number.set_value
            target:
              entity_id: input_number.system_performance_target
            data:
              value: >-
                {% set conservation = states('sensor.water_conservation_index') | float %}
                {% set efficiency = states('sensor.harvester_efficiency') | float %}
                {% set base_target = 75 %}
                {% set surplus_boost = (conservation - 85) * 2 %}
                {% set efficiency_boost = (efficiency - 85) * 1.5 %}
                {{ [base_target + surplus_boost + efficiency_boost, 100] | min }}

      # Peak Production Resource Allocation
      - conditions:
          - condition: trigger
            id: "peak_production_achieved"
        sequence:
          # Allocate additional resources to maintain peak production
          - service: script.turn_on
            target:
              entity_id: script.peak_production_maintenance
            data:
              variables:
                production_level: "{{ states('sensor.spice_production_level') | float }}"
                resource_allocation_boost: >-
                  {% set production = states('sensor.spice_production_level') | float %}
                  {% set efficiency = states('sensor.harvester_efficiency') | float %}
                  {% if production > 120 and efficiency > 85 %}
                    maximum
                  {% else %}
                    standard
                  {% endif %}

          # Prioritize automation systems supporting high production
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.high_production_priority_mode

      # System Overload Mitigation
      - conditions:
          - condition: trigger
            id: "system_overload_detected"
        sequence:
          # Emergency load shedding
          - service: script.turn_on
            target:
              entity_id: script.emergency_load_shedding
            data:
              variables:
                response_time: "{{ states('sensor.system_response_time') | float }}"
                overload_severity: >-
                  {% set response = states('sensor.system_response_time') | float %}
                  {% if response < 50 %}
                    critical
                  {% elif response < 60 %}
                    severe
                  {% else %}
                    moderate
                  {% endif %}

          # Temporarily disable resource-intensive automations
          - service: automation.turn_off
            target:
              entity_id:
                - automation.complex_scene_management
                - automation.multi_zone_coordination
                - automation.predictive_analytics_update

      # Optimal Performance - Resource Expansion
      - conditions:
          - condition: trigger
            id: "system_optimal_performance"
        sequence:
          # Enable advanced features during optimal performance
          - service: automation.turn_on
            target:
              entity_id:
                - automation.advanced_pattern_analysis
                - automation.predictive_optimization
                - automation.machine_learning_updates

          # Increase automation sophistication
          - service: input_number.set_value
            target:
              entity_id: input_number.automation_complexity_level
            data:
              value: >-
                {% set response = states('sensor.system_response_time') | float %}
                {% set efficiency = states('sensor.harvester_efficiency') | float %}
                {% set complexity_boost = ((response - 95) * 10) + ((efficiency - 85) * 5) %}
                {{ [75 + complexity_boost, 100] | min }}

      # Regular Resource Optimization Cycle
      - conditions:
          - condition: trigger
            id: "resource_optimization_cycle"
        sequence:
          # Comprehensive resource assessment and rebalancing
          - service: script.turn_on
            target:
              entity_id: script.comprehensive_resource_optimization
            data:
              variables:
                harvester_efficiency: "{{ states('sensor.harvester_efficiency') | float }}"
                conservation_index: "{{ states('sensor.water_conservation_index') | float }}"
                production_level: "{{ states('sensor.spice_production_level') | float }}"
                response_time: "{{ states('sensor.system_response_time') | float }}"
                health_score: "{{ states('sensor.sietch_health_score') | float }}"
                survival_status: "{{ states('sensor.desert_survival_status') }}"
                
          # Update resource allocation priorities
          - service: input_text.set_value
            target:
              entity_id: input_text.resource_priority_matrix
            data:
              value: >-
                {% set priorities = [] %}
                {% if states('sensor.desert_survival_status') == 'Critical' %}
                  {% set priorities = priorities + ['survival_systems'] %}
                {% endif %}
                {% if states('sensor.sietch_health_score') | float < 70 %}
                  {% set priorities = priorities + ['system_health'] %}
                {% endif %}
                {% if states('sensor.spice_production_level') | float < 90 %}
                  {% set priorities = priorities + ['production_optimization'] %}
                {% endif %}
                {% if states('sensor.harvester_efficiency') | float > 85 %}
                  {% set priorities = priorities + ['efficiency_utilization'] %}
                {% endif %}
                {{ priorities | join(',') }}

  # Comprehensive resource management logging
  - service: input_text.set_value
    target:
      entity_id: input_text.resource_management_log
    data:
      value: >-
        {{ now().strftime('%H:%M:%S') }}: {{ trigger.id }} |
        Harvester: {{ states('sensor.harvester_efficiency') }}% |
        Conservation: {{ states('sensor.water_conservation_index') }}% |
        Production: {{ states('sensor.spice_production_level') }} units |
        Response: {{ states('sensor.system_response_time') }}% |
        Health: {{ states('sensor.sietch_health_score') }}% |
        Survival: {{ states('sensor.desert_survival_status') }} |
        Resource Score: {{
          (states('sensor.harvester_efficiency')|float * 0.25) +
          (states('sensor.water_conservation_index')|float * 0.20) +
          (states('sensor.spice_production_level')|float * 0.25) +
          (states('sensor.system_response_time')|float * 0.20) +
          (states('sensor.sietch_health_score')|float * 0.10)
        | round(1) }}

  # Predictive resource planning for next cycle
  - service: automation.trigger
    target:
      entity_id: automation.predictive_resource_planning
    data:
      skip_condition: false

mode: queued
max: 5