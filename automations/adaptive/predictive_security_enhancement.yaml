# Predictive Security Enhancement System
# Advanced security with anomaly detection and predictive measures
#
# Pattern 3: Predictive Security Enhancement  
# - Uses Night Security Effectiveness to adjust sensitivity levels
# - Uses Motion Pattern Analysis to identify anomalies
# - Uses Sietch Occupancy Distribution for zone-based security
# - Pre-arms systems based on departure predictions

alias: "Predictive Security - Anomaly Detection Matrix"
description: "Advanced security with predictive threat assessment and adaptive response"
trigger:
  # Anomaly detection triggers
  - platform: template
    value_template: >-
      {% set pattern = states('sensor.motion_pattern_analysis') %}
      {% set activity = states('sensor.fremen_activity_level') | float %}
      {% set hour = now().hour %}
      
      {# Detect anomalous patterns #}
      {% if 22 <= hour or hour <= 6 %}
        {# Night anomaly detection #}
        {{ pattern == 'Full Activity' and activity > 60 }}
      {% elif 6 <= hour <= 9 %}
        {# Morning anomaly detection #}
        {{ pattern == 'Dormant' and activity < 10 and is_state('binary_sensor.house_occupied', 'on') }}
      {% elif 18 <= hour <= 22 %}
        {# Evening anomaly detection #}
        {{ pattern == 'Dormant' and activity < 5 and is_state('binary_sensor.house_occupied', 'on') }}
      {% else %}
        false
      {% endif %}
    for:
      minutes: 10
    id: "pattern_anomaly_detected"

  # Security effectiveness changes
  - platform: numeric_state
    entity_id: sensor.night_security_effectiveness
    below: 70
    for:
      minutes: 5
    id: "security_degraded"

  # Zone-based security triggers
  - platform: state
    entity_id: sensor.sietch_occupancy_distribution
    from: 
      - "Office"
      - "Kitchen" 
      - "Living Room"
    to: "No Primary Zone"
    for:
      minutes: 30
    id: "all_zones_clear"

  # Predictive departure detection
  - platform: template
    value_template: >-
      {% set activity = states('sensor.fremen_activity_level') | float %}
      {% set pattern = states('sensor.motion_pattern_analysis') %}
      {% set occupancy = states('sensor.sietch_occupancy_distribution') %}
      {% set hour = now().hour %}
      
      {# Predict departure based on patterns #}
      {% if 7 <= hour <= 9 and pattern == 'Focused' and occupancy == 'Kitchen' %}
        {# Morning departure pattern #}
        {{ activity > 50 and activity < 80 }}
      {% elif 16 <= hour <= 18 and pattern == 'Distributed' %}
        {# Afternoon departure pattern #}
        {{ activity > 40 and activity < 70 }}
      {% else %}
        false
      {% endif %}
    for:
      minutes: 15
    id: "departure_predicted"

  # Critical system status changes
  - platform: state
    entity_id: sensor.desert_survival_status
    to: 
      - "Critical"
      - "Stressed" 
    id: "system_stress_detected"

condition:
  # Multi-layered security condition assessment
  - condition: template
    value_template: >-
      {% set security_effectiveness = states('sensor.night_security_effectiveness') | float %}
      {% set health_score = states('sensor.sietch_health_score') | float %}
      {% set survival_status = states('sensor.desert_survival_status') %}
      {% set energy_shield = states('sensor.energy_shield_status') | float %}
      
      {# Security system readiness check #}
      {% set system_ready = security_effectiveness > 50 and health_score > 40 %}
      
      {# Critical override conditions #}
      {% set critical_mode = survival_status in ['Critical', 'Stressed'] or energy_shield < 50 %}
      
      {{ system_ready or critical_mode }}

action:
  # Complex security response decision tree
  - choose:
      # Pattern Anomaly Response
      - conditions:
          - condition: trigger
            id: "pattern_anomaly_detected"
        sequence:
          # Increase monitoring sensitivity
          - service: input_number.set_value
            target:
              entity_id: input_number.motion_sensitivity
            data:
              value: >-
                {% set current = states('input_number.motion_sensitivity') | float %}
                {% set hour = now().hour %}
                {% set night_multiplier = 1.5 if 22 <= hour or hour <= 6 else 1.2 %}
                {{ [current * night_multiplier, 100] | min }}

          # Activate enhanced detection
          - service: script.turn_on
            target:
              entity_id: script.enhanced_anomaly_detection
            data:
              variables:
                trigger_time: "{{ now().isoformat() }}"
                pattern_detected: "{{ states('sensor.motion_pattern_analysis') }}"
                activity_level: "{{ states('sensor.fremen_activity_level') | float }}"
                zone_distribution: "{{ states('sensor.sietch_occupancy_distribution') }}"
                security_level: "{{ states('sensor.night_security_effectiveness') | float }}"

          # Log security event
          - service: logbook.log
            data:
              name: "Sietch Security Alert"
              message: >-
                Anomalous pattern detected: {{ states('sensor.motion_pattern_analysis') }} activity 
                at {{ states('sensor.fremen_activity_level') }}% during {{ now().strftime('%H:%M') }}. 
                Enhanced monitoring activated.

      # Security System Degradation Response
      - conditions:
          - condition: trigger
            id: "security_degraded"
        sequence:
          # Compensate with alternative measures
          - service: light.turn_on
            target:
              entity_id: 
                - light.security_perimeter_lights
                - light.motion_activated_zones
            data:
              brightness_pct: >-
                {% set effectiveness = states('sensor.night_security_effectiveness') | float %}
                {% set compensation = (100 - effectiveness) * 1.2 %}
                {{ [50 + compensation, 100] | min | round }}

          # Increase automation frequency
          - service: automation.turn_on
            target:
              entity_id: automation.enhanced_perimeter_check

          # Notify of degraded security
          - service: persistent_notification.create
            data:
              title: "Security System Alert"
              message: >-
                Night security effectiveness at {{ states('sensor.night_security_effectiveness') }}%. 
                Compensatory measures activated. Check sensor network and response devices.
              notification_id: "security_degraded_{{ now().timestamp() }}"

      # Predictive Departure Security
      - conditions:
          - condition: trigger
            id: "departure_predicted"
        sequence:
          # Pre-arm security systems
          - service: script.turn_on
            target:
              entity_id: script.predictive_security_arming
            data:
              variables:
                prediction_confidence: >-
                  {% set activity = states('sensor.fremen_activity_level') | float %}
                  {% set pattern = states('sensor.motion_pattern_analysis') %}
                  {% set hour = now().hour %}
                  {% if 7 <= hour <= 9 and pattern == 'Focused' %}
                    {{ (activity - 30) / 30 * 100 | round }}
                  {% elif 16 <= hour <= 18 and pattern == 'Distributed' %}
                    {{ (activity - 20) / 40 * 100 | round }}
                  {% else %}
                    50
                  {% endif %}
                departure_pattern: "{{ states('sensor.motion_pattern_analysis') }}"
                primary_zone: "{{ states('sensor.sietch_occupancy_distribution') }}"

          # Schedule delayed full arming
          - delay:
              minutes: >-
                {% set pattern = states('sensor.motion_pattern_analysis') %}
                {% if pattern == 'Focused' %}
                  45
                {% elif pattern == 'Distributed' %}
                  30
                {% else %}
                  60
                {% endif %}

          - service: script.turn_on
            target:
              entity_id: script.conditional_full_security_arm

      # All Zones Clear - Security Escalation
      - conditions:
          - condition: trigger
            id: "all_zones_clear"
        sequence:
          # Verify true absence vs system failure
          - service: script.turn_on
            target:
              entity_id: script.absence_verification_protocol
            data:
              variables:
                clearance_duration: "{{ (as_timestamp(now()) - as_timestamp(trigger.from_state.last_changed)) / 60 }}"
                last_active_zone: "{{ trigger.from_state.state }}"
                health_score: "{{ states('sensor.sietch_health_score') | float }}"
                
          # Conditional security activation
          - condition: template
            value_template: >-
              {% set health = states('sensor.sietch_health_score') | float %}
              {% set effectiveness = states('sensor.night_security_effectiveness') | float %}
              {{ health > 60 and effectiveness > 70 }}

          # Activate full perimeter security
          - service: alarm_control_panel.alarm_arm_away
            target:
              entity_id: alarm_control_panel.sietch_security
            data:
              code: "{{ states('input_text.security_code') }}"

      # System Stress Emergency Protocol
      - conditions:
          - condition: trigger
            id: "system_stress_detected"
        sequence:
          # Emergency security lockdown
          - service: script.turn_on
            target:
              entity_id: script.emergency_security_lockdown
            data:
              variables:
                stress_level: "{{ states('sensor.desert_survival_status') }}"
                energy_status: "{{ states('sensor.energy_shield_status') | float }}"
                health_score: "{{ states('sensor.sietch_health_score') | float }}"

          # Override all conservation measures for security
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.security_override_active

  # Advanced threat assessment logging
  - service: input_text.set_value
    target:
      entity_id: input_text.security_intelligence_log
    data:
      value: >-
        {{ now().strftime('%H:%M:%S') }}: {{ trigger.id }} |
        Security: {{ states('sensor.night_security_effectiveness') }}% |
        Pattern: {{ states('sensor.motion_pattern_analysis') }} |
        Activity: {{ states('sensor.fremen_activity_level') }}% |
        Zones: {{ states('sensor.sietch_occupancy_distribution') }} |
        Health: {{ states('sensor.sietch_health_score') }}% |
        Survival: {{ states('sensor.desert_survival_status') }}

  # Predictive analysis for next security cycle
  - service: script.turn_on
    target:
      entity_id: script.security_pattern_learning
    data:
      variables:
        current_pattern: "{{ states('sensor.motion_pattern_analysis') }}"
        trigger_type: "{{ trigger.id }}"
        response_effectiveness: >-
          {% set security = states('sensor.night_security_effectiveness') | float %}
          {% set health = states('sensor.sietch_health_score') | float %}
          {{ (security + health) / 2 }}

mode: queued
max: 3