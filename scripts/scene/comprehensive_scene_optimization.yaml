comprehensive_scene_optimization:
  alias: Comprehensive Scene Optimization
  description: "Comprehensive optimization of all scene elements"
  icon: mdi:tune-variant
  sequence:
    # Comprehensive scene analysis
    - variables:
        activity_level: "{{ states('sensor.fremen_activity_level') | int }}"
        atmospheric_conditions: "{{ states('sensor.atmospheric_conditions') | int }}"
        occupancy_pattern: "{{ states('sensor.sietch_occupancy_distribution') }}"
        conservation_index: "{{ states('sensor.water_conservation_index') | int }}"
    
    # Optimize lighting based on multiple factors
    - service: light.turn_on
      target:
        area_id: all
      data:
        brightness: >
          {% set activity = states('sensor.fremen_activity_level') | int %}
          {% set atmospheric = states('sensor.atmospheric_conditions') | int %}
          {% set conservation = states('sensor.water_conservation_index') | int %}
          {% set base = 180 %}
          
          {# Activity factor #}
          {% set activity_adj = (activity - 50) * 0.8 %}
          
          {# Atmospheric factor #}
          {% set atm_adj = (50 - atmospheric) * 0.6 %}
          
          {# Conservation factor #}
          {% set cons_adj = conservation > 80 and -50 or 0 %}
          
          {{ [base + activity_adj + atm_adj + cons_adj, 255] | min | max(30) }}
        
        color_temp: >
          {% set hour = now().hour %}
          {% set atmospheric = states('sensor.atmospheric_conditions') | int %}
          {% if hour < 10 %}
            320  # Warm morning light
          {% elif hour > 18 %}
            380  # Neutral evening
          {% elif atmospheric < 40 %}
            300  # Compensate for poor atmospheric conditions
          {% else %}
            400  # Daylight
          {% endif %}
        
        transition: 3
    
    # Optimize climate settings
    - service: climate.set_temperature
      target:
        entity_id: climate.sietch_main
      data:
        temperature: >
          {% set activity = states('sensor.fremen_activity_level') | int %}
          {% set conservation = states('sensor.water_conservation_index') | int %}
          {% set base_temp = 21 %}
          
          {% if conservation > 85 %}
            {{ base_temp - 2 }}  # Conservation mode
          {% elif activity > 80 %}
            {{ base_temp + 1 }}  # Higher activity needs comfort
          {% else %}
            {{ base_temp }}
          {% endif %}
    
    # Log comprehensive optimization
    - service: input_text.set_value
      target:
        entity_id: input_text.resource_management_log
      data:
        value: >
          Comprehensive Optimization: {{ now().strftime('%H:%M') }} -
          Activity: {{ activity_level }}% -
          Atmospheric: {{ atmospheric_conditions }}% -
          Occupancy: {{ occupancy_pattern }} -
          Conservation: {{ conservation_index }}%
    
    # Optimization notification
    - service: notify.mobile_app_tori_phone_2
      data:
        message: "âœ¨ Comprehensive scene optimization complete. All systems harmonized."