# DISABLED - AI logic too overwhelming
# DISABLED - alias: Alexa Timer Context Handler
description: "Intelligent context detection and response for Alexa timer events based on location, time, and patterns"
icon: mdi:timer-sand
sequence:
  # Analyze current context
  - variables:
      timer_zone: "{{ zone | default('unknown') }}"
      timer_duration_minutes: "{{ duration | default(0) | int }}"
      current_context: >
        {% set hour = now().hour %}
        {% set activity = states('sensor.fremen_activity_level') | int %}
        {% set health = states('sensor.sietch_health_score') | int %}
        {% if timer_zone == 'kitchen' %}
          {% if hour >= 6 and hour <= 10 %}
            breakfast_prep
          {% elif hour >= 11 and hour <= 14 %}
            lunch_prep
          {% elif hour >= 17 and hour <= 20 %}
            dinner_prep
          {% elif timer_duration_minutes <= 10 %}
            quick_cook
          {% elif timer_duration_minutes >= 30 %}
            slow_cook
          {% else %}
            general_cook
          {% endif %}
        {% elif timer_zone == 'office' %}
          {% if timer_duration_minutes <= 15 %}
            break_timer
          {% elif timer_duration_minutes <= 30 %}
            focus_session
          {% elif timer_duration_minutes >= 45 %}
            deep_work
          {% else %}
            work_task
          {% endif %}
        {% elif timer_zone == 'bedroom' %}
          {% if hour >= 22 or hour <= 6 %}
            sleep_related
          {% elif timer_duration_minutes <= 20 %}
            power_nap
          {% else %}
            rest_period
          {% endif %}
        {% elif timer_zone == 'atlas_room' %}
          {% if hour >= 18 and hour <= 22 %}
            evening_relax
          {% elif timer_duration_minutes <= 15 %}
            quick_activity
          {% else %}
            leisure_time
          {% endif %}
        {% else %}
          general
        {% endif %}

  # Context-specific scene and lighting adjustments
  - choose:
      # Kitchen Contexts
      - conditions:
          - condition: template
            value_template: "{{ 'cook' in current_context or 'prep' in current_context }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: kitchen
            data:
              brightness: >
                {% if 'breakfast' in current_context %}
                  180
                {% elif 'dinner' in current_context %}
                  220
                {% elif 'quick' in current_context %}
                  200
                {% elif 'slow' in current_context %}
                  160
                {% else %}
                  200
                {% endif %}
              color_temp: >
                {% if 'breakfast' in current_context %}
                  350
                {% elif 'dinner' in current_context %}
                  380
                {% else %}
                  320
                {% endif %}
          - service: scene.turn_on
            target:
              entity_id: scene.kitchen_cooking
          - condition: template
            value_template: "{{ timer_duration_minutes >= 30 }}"
          - service: input_text.set_value
            target:
              entity_id: input_text.current_kitchen_activity
            data:
              value: "Long cooking timer active - {{ timer_duration_minutes }} minutes"

      # Office Contexts  
      - conditions:
          - condition: template
            value_template: "{{ 'work' in current_context or 'focus' in current_context or 'deep' in current_context }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: office
            data:
              brightness: >
                {% if 'deep_work' in current_context %}
                  255
                {% elif 'focus_session' in current_context %}
                  220
                {% elif 'break_timer' in current_context %}
                  180
                {% else %}
                  200
                {% endif %}
              color_temp: 250
          - service: scene.turn_on
            target:
              entity_id: scene.office_productive
          - condition: template
            value_template: "{{ 'break' not in current_context }}"
          - service: input_text.set_value
            target:
              entity_id: input_text.current_work_mode
            data:
              value: "{{ current_context.replace('_', ' ').title() }} - {{ timer_duration_minutes }}min"

      # Bedroom Contexts
      - conditions:
          - condition: template
            value_template: "{{ 'sleep' in current_context or 'nap' in current_context or 'rest' in current_context }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: bedroom
            data:
              brightness: >
                {% if 'sleep' in current_context %}
                  50
                {% elif 'nap' in current_context %}
                  80
                {% else %}
                  120
                {% endif %}
              color_temp: 454
          - condition: template
            value_template: "{{ 'sleep' in current_context }}"
          - service: script.turn_on
            target:
              entity_id: script.night_security_protocol

      # Atlas Room Contexts
      - conditions:
          - condition: template
            value_template: "{{ 'relax' in current_context or 'leisure' in current_context }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: atlas_room
            data:
              brightness: >
                {% if 'evening_relax' in current_context %}
                  140
                {% else %}
                  180
                {% endif %}
              color_temp: 400
          - service: scene.turn_on
            target:
              entity_id: scene.atlas_room_cozy

  # Set context tracking
  - service: input_text.set_value
    target:
      entity_id: input_text.last_timer_context
    data:
      value: "{{ timer_zone }}: {{ current_context }} ({{ timer_duration_minutes }}min) at {{ now().strftime('%H:%M') }}"

  # Intelligent predictions for common timer patterns
  - choose:
      # Cooking pattern detection
      - conditions:
          - condition: template
            value_template: "{{ timer_zone == 'kitchen' and timer_duration_minutes >= 20 }}"
        sequence:
          # Pre-warm dining area if dinner time
          - condition: template
            value_template: "{{ now().hour >= 17 and now().hour <= 19 }}"
          - delay: "00:{{ (timer_duration_minutes - 10) | string }}:00"
          - service: light.turn_on
            target:
              area_id: dining_room
            data:
              brightness: 160
              color_temp: 380
          - service: tts.cloud_say
            target:
              entity_id: media_player.echo_dot_kitchen
            data:
              message: "Dining area prepared. Your meal timing suggests optimal serving conditions in 10 minutes."

      # Work break reminders
      - conditions:
          - condition: template
            value_template: "{{ timer_zone == 'office' and timer_duration_minutes >= 45 }}"
        sequence:
          - delay: "00:{{ (timer_duration_minutes - 15) | string }}:00"
          - service: tts.cloud_say
            target:
              entity_id: media_player.bose_office
            data:
              message: "Deep work session approaching completion. Consider preparing for transition in 15 minutes."

      # Evening wind-down preparation
      - conditions:
          - condition: template
            value_template: "{{ timer_zone == 'atlas_room' and now().hour >= 21 and timer_duration_minutes >= 30 }}"
        sequence:
          - delay: "00:{{ (timer_duration_minutes - 10) | string }}:00"
          - service: script.turn_on
            target:
              entity_id: script.night_security_protocol
          - service: tts.cloud_say
            target:
              entity_id: media_player.echo_dot_atlas_room
            data:
              message: "Evening activity nearing completion. Night protocols will engage for optimal rest preparation."

  # Log context decision for learning
  - service: logbook.log
    data:
      name: "Alexa Timer Context Intelligence"
      message: >
        Context: {{ current_context }} | 
        Zone: {{ timer_zone }} | 
        Duration: {{ timer_duration_minutes }}min |
        Time: {{ now().strftime('%H:%M') }} |
        Activity: {{ states('sensor.fremen_activity_level') }}%