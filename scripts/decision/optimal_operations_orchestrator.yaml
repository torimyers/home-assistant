alias: Optimal Operations Orchestrator
description: "Orchestrates optimal system operations when all parameters are within normal ranges"
icon: mdi:auto-fix
sequence:
    # Assess optimal operation parameters
    - variables:
        # System health metrics
        sietch_health: "{{ states('sensor.sietch_health_score') | int }}"
        harvester_efficiency: "{{ states('sensor.harvester_efficiency') | int }}"
        blueprint_efficiency: "{{ states('sensor.blueprint_efficiency_score') | int }}"
        automation_success: "{{ states('sensor.automation_success_rate') | int }}"
        
        # Activity and environmental metrics
        activity_level: "{{ states('sensor.fremen_activity_level') | int }}"
        occupancy_pattern: "{{ states('sensor.sietch_occupancy_distribution') }}"
        
        # Calculate optimization opportunity score
        optimization_score: >
          {% set health = states('sensor.sietch_health_score') | int %}
          {% set harvester = states('sensor.harvester_efficiency') | int %}
          {% set blueprint = states('sensor.blueprint_efficiency_score') | int %}
          {% set success = states('sensor.automation_success_rate') | int %}
          
          {# Calculate potential for further optimization #}
          {% set health_potential = 100 - health %}
          {% set harvester_potential = 100 - harvester %}
          {% set blueprint_potential = 100 - blueprint %}
          {% set success_potential = 100 - success %}
          
          {# Weighted optimization opportunity #}
          {% set opportunity = (health_potential * 0.3 + harvester_potential * 0.3 + blueprint_potential * 0.2 + success_potential * 0.2) %}
          {{ opportunity | round }}
        
        # Determine orchestration strategy
        orchestration_mode: >
          {% set opportunity = optimization_score | int %}
          {% set activity = states('sensor.fremen_activity_level') | int %}
          {% set hour = now().hour %}
          
          {% if opportunity > 30 %}
            enhancement_mode
          {% elif activity > 80 %}
            high_activity_optimization
          {% elif 22 <= hour or hour <= 6 %}
            night_optimization
          {% else %}
            maintenance_excellence
          {% endif %}
    
    # Log optimal operations analysis
    - service: input_text.set_value
      target:
        entity_id: input_text.predictive_analytics_log
      data:
        value: >
          OPTIMAL ORCHESTRATION: {{ now().strftime('%H:%M') }} -
          Health: {{ sietch_health }}% -
          Harvester: {{ harvester_efficiency }}% -
          Blueprint: {{ blueprint_efficiency }}% -
          Success: {{ automation_success }}% -
          Optimization Opportunity: {{ optimization_score }}% -
          Mode: {{ orchestration_mode | upper }}
    
    # Execute orchestration strategy
    - choose:
        # Enhancement mode - significant improvement opportunity
        - conditions:
            - condition: template
              value_template: "{{ orchestration_mode == 'enhancement_mode' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "ENHANCEMENT MODE: Significant optimization opportunities detected - implementing system enhancements"
            
            # Enable comprehensive resource optimization
            - service: script.turn_on
              target:
                entity_id: script.comprehensive_resource_optimization
            
            # Boost system performance targets
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 90  # High performance for enhancement
            
            # Enable full automation complexity
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_complexity_level
              data:
                value: 3
            
            # Trigger efficiency optimization learning
            - service: script.turn_on
              target:
                entity_id: script.efficiency_optimization_learning
        
        # High activity optimization - optimize for current high activity
        - conditions:
            - condition: template
              value_template: "{{ orchestration_mode == 'high_activity_optimization' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "HIGH ACTIVITY OPTIMIZATION: Optimizing all systems for peak activity period"
            
            # Optimize scenes for high activity
            - service: script.turn_on
              target:
                entity_id: script.intelligent_scene_selector
            
            # Enable multi-zone coordination for activity
            - service: script.turn_on
              target:
                entity_id: script.multi_zone_scene_coordination
            
            # Set high performance targets
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 85
            
            # Maximum execution priority
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_execution_priority
              data:
                value: 3
        
        # Night optimization - optimize for rest period
        - conditions:
            - condition: template
              value_template: "{{ orchestration_mode == 'night_optimization' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "NIGHT OPTIMIZATION: Optimizing systems for rest period with enhanced security"
            
            # Enable night mode settings
            - service: scene.turn_on
              target:
                entity_id: scene.system_goodnight
            
            # Optimize security for night
            - service: script.turn_on
              target:
                entity_id: script.night_security_protocol
            
            # Reduce system performance for energy conservation
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 60  # Lower performance for night
            
            # Enhanced security sensitivity
            - service: input_number.set_value
              target:
                entity_id: input_number.motion_sensitivity
              data:
                value: 80
      
      # Maintenance excellence - peak performance maintenance
      default:
        - service: input_text.set_value
          target:
            entity_id: input_text.predictive_analytics_log
          data:
            value: "MAINTENANCE EXCELLENCE: System at peak performance - maintaining optimal state"
        
        # Peak maintenance settings
        - service: script.turn_on
          target:
            entity_id: script.peak_production_maintenance
        
        # Optimal performance settings
        - service: input_number.set_value
          target:
            entity_id: input_number.system_performance_target
          data:
            value: 85  # Excellent baseline
        
        - service: input_number.set_value
          target:
            entity_id: input_number.automation_complexity_level
          data:
            value: 3  # Full complexity available
        
        - service: input_number.set_value
          target:
            entity_id: input_number.automation_execution_priority
          data:
            value: 2  # Standard optimal priority
    
    # Update prediction accuracy based on optimization success
    - service: input_number.set_value
      target:
        entity_id: input_number.prediction_accuracy_score
      data:
        value: >
          {% set current = states('input_number.prediction_accuracy_score') | int %}
          {% set health = sietch_health | int %}
          {% set efficiency = harvester_efficiency | int %}
          
          {# Reward successful optimization in normal conditions #}
          {% if health > 85 and efficiency > 80 %}
            {{ [current + 4, 100] | min }}
          {% elif health > 70 and efficiency > 70 %}
            {{ [current + 2, 100] | min }}
          {% else %}
            {{ [current + 1, 100] | min }}
          {% endif %}
    
    # Log orchestration completion
    - service: input_text.set_value
      target:
        entity_id: input_text.predictive_analytics_log
      data:
        value: "OPTIMAL ORCHESTRATION COMPLETE: {{ orchestration_mode | upper }} successfully implemented"
    
    # Excellence achievement notification
    - condition: template
      value_template: >
        {{ sietch_health | int > 90 and harvester_efficiency | int > 85 and blueprint_efficiency | int > 80 }}
    - service: notify.mobile_app_tori_phone_2
      data:
        message: >
          ðŸŽ¯ Operational Excellence Achieved: 
          Health {{ sietch_health }}% | Harvester {{ harvester_efficiency }}% | Blueprint {{ blueprint_efficiency }}%
          System orchestration at peak performance!