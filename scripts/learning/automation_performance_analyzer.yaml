automation_performance_analyzer:
  alias: Automation Performance Analyzer
  description: "Analyzes automation performance and suggests optimizations based on success patterns"
  icon: mdi:chart-timeline-variant
  sequence:
    # Gather performance metrics
    - variables:
        success_rate: "{{ states('sensor.automation_success_rate') | int }}"
        response_time: "{{ states('sensor.system_response_time') | int }}"
        blueprint_efficiency: "{{ states('sensor.blueprint_efficiency_score') | int }}"
        
        # Calculate overall performance score
        performance_score: >
          {% set success = states('sensor.automation_success_rate') | int %}
          {% set response = states('sensor.system_response_time') | int %}
          {% set efficiency = states('sensor.blueprint_efficiency_score') | int %}
          
          {# Weighted performance calculation #}
          {% set success_weight = 0.4 %}
          {% set response_weight = 0.3 %}  {# Lower response time = better #}
          {% set efficiency_weight = 0.3 %}
          
          {% set response_score = 100 - (response / 2) %}  {# Convert response time to score #}
          {% set response_score = [response_score, 100] | min | max(0) %}
          
          {{ (success * success_weight + response_score * response_weight + efficiency * efficiency_weight) | round }}
        
        # Determine optimization recommendations
        optimization_priority: >
          {% set success = states('sensor.automation_success_rate') | int %}
          {% set response = states('sensor.system_response_time') | int %}
          {% set efficiency = states('sensor.blueprint_efficiency_score') | int %}
          
          {% if success < 70 %}
            reliability
          {% elif response > 150 %}
            speed
          {% elif efficiency < 70 %}
            efficiency
          {% else %}
            maintenance
          {% endif %}
    
    # Log comprehensive performance analysis
    - service: input_text.set_value
      target:
        entity_id: input_text.predictive_analytics_log
      data:
        value: >
          PERFORMANCE ANALYSIS: {{ now().strftime('%H:%M') }} -
          Success: {{ success_rate }}% -
          Response: {{ response_time }}ms -
          Efficiency: {{ blueprint_efficiency }}% -
          Overall Score: {{ performance_score }}% -
          Priority: {{ optimization_priority | upper }}
    
    # Apply performance-based optimizations
    - choose:
        # Reliability optimization needed
        - conditions:
            - condition: template
              value_template: "{{ optimization_priority == 'reliability' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "RELIABILITY OPTIMIZATION: Reducing automation complexity and enabling error recovery protocols"
            
            # Reduce complexity for reliability
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_complexity_level
              data:
                value: 1  # Minimal complexity for reliability
            
            # Lower execution priority to reduce conflicts
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_execution_priority
              data:
                value: 1
        
        # Speed optimization needed
        - conditions:
            - condition: template
              value_template: "{{ optimization_priority == 'speed' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "SPEED OPTIMIZATION: Increasing system performance targets and reducing response delays"
            
            # Increase system performance
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 85  # Higher performance target
            
            # Prioritize faster execution
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_execution_priority
              data:
                value: 2
        
        # Efficiency optimization needed
        - conditions:
            - condition: template
              value_template: "{{ optimization_priority == 'efficiency' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "EFFICIENCY OPTIMIZATION: Optimizing resource usage and automation coordination"
            
            # Enable resource conservation for efficiency
            - service: input_boolean.turn_on
              target:
                entity_id: input_boolean.resource_conservation_mode
            
            # Optimize automation complexity
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_complexity_level
              data:
                value: 2  # Moderate complexity for efficiency
      
      # Maintenance mode - peak performance
      default:
        - service: input_text.set_value
          target:
            entity_id: input_text.predictive_analytics_log
          data:
            value: "MAINTENANCE MODE: Performance optimal - conducting preventive optimizations"
        
        # Set peak performance settings
        - service: input_number.set_value
          target:
            entity_id: input_number.system_performance_target
          data:
            value: 90
        
        - service: input_number.set_value
          target:
            entity_id: input_number.automation_complexity_level
          data:
            value: 3  # Full complexity available
    
    # Update learning metrics based on performance
    - service: input_number.set_value
      target:
        entity_id: input_number.prediction_accuracy_score
      data:
        value: >
          {% set current = states('input_number.prediction_accuracy_score') | int %}
          {% set perf_score = performance_score | int %}
          {% if perf_score > 85 %}
            {{ [current + 5, 100] | min }}
          {% elif perf_score > 70 %}
            {{ [current + 2, 100] | min }}
          {% elif perf_score < 50 %}
            {{ [current - 3, 0] | max }}
          {% else %}
            {{ current }}
          {% endif %}
    
    # Performance-based notifications
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ performance_score | int < 60 }}"
          sequence:
            - service: notify.mobile_app_tori_phone_2
              data:
                message: "⚠️ Performance Analysis: {{ performance_score }}% overall score. {{ optimization_priority | title }} optimization applied."
                data:
                  priority: high
        - conditions:
            - condition: template
              value_template: "{{ performance_score | int > 90 }}"
          sequence:
            - service: notify.mobile_app_tori_phone_2
              data:
                message: "🎯 Performance Excellence: {{ performance_score }}% score achieved. System operating at peak efficiency."