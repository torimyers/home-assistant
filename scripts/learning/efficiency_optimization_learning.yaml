efficiency_optimization_learning:
  alias: Efficiency Optimization Learning
  description: "Learns optimal efficiency settings and continuously improves system performance"
  icon: mdi:speedometer
  sequence:
    # Analyze current efficiency metrics
    - variables:
        harvester_efficiency: "{{ states('sensor.harvester_efficiency') | int }}"
        blueprint_efficiency: "{{ states('sensor.blueprint_efficiency_score') | int }}"
        water_conservation: "{{ states('sensor.water_conservation_index') | int }}"
        system_response: "{{ states('sensor.system_response_time') | int }}"
        
        # Calculate composite efficiency score
        composite_efficiency: >
          {% set harvester = states('sensor.harvester_efficiency') | int %}
          {% set blueprint = states('sensor.blueprint_efficiency_score') | int %}
          {% set water = states('sensor.water_conservation_index') | int %}
          {% set response = states('sensor.system_response_time') | int %}
          
          {# Convert response time to efficiency score (lower is better) #}
          {% set response_efficiency = 100 - (response / 3) %}
          {% set response_efficiency = [response_efficiency, 100] | min | max(0) %}
          
          {# Water conservation - balance between too low and too high #}
          {% if water < 30 %}
            {% set water_efficiency = water * 2 %}  {# Too low conservation #}
          {% elif water > 90 %}
            {% set water_efficiency = 100 - (water - 90) * 5 %}  {# Too high conservation #}
          {% else %}
            {% set water_efficiency = 90 %}  {# Optimal range #}
          {% endif %}
          
          {# Weighted composite score #}
          {% set composite = (harvester * 0.3 + blueprint * 0.3 + water_efficiency * 0.2 + response_efficiency * 0.2) | round %}
          {{ composite }}
        
        # Determine optimization strategy
        optimization_strategy: >
          {% set harvester = states('sensor.harvester_efficiency') | int %}
          {% set blueprint = states('sensor.blueprint_efficiency_score') | int %}
          {% set response = states('sensor.system_response_time') | int %}
          
          {% if harvester < 50 %}
            harvester_focus
          {% elif blueprint < 60 %}
            blueprint_focus
          {% elif response > 120 %}
            speed_focus
          {% else %}
            balanced_optimization
          {% endif %}
    
    # Log efficiency learning analysis
    - service: input_text.set_value
      target:
        entity_id: input_text.predictive_analytics_log
      data:
        value: >
          EFFICIENCY LEARNING: {{ now().strftime('%H:%M') }} -
          Harvester: {{ harvester_efficiency }}% -
          Blueprint: {{ blueprint_efficiency }}% -
          Water: {{ water_conservation }}% -
          Response: {{ system_response }}ms -
          Composite: {{ composite_efficiency }}% -
          Strategy: {{ optimization_strategy | upper }}
    
    # Apply learned optimization strategy
    - choose:
        # Harvester focus optimization
        - conditions:
            - condition: template
              value_template: "{{ optimization_strategy == 'harvester_focus' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "HARVESTER FOCUS: Optimizing for maximum resource harvesting efficiency"
            
            # Enable high production priority mode
            - service: input_boolean.turn_on
              target:
                entity_id: input_boolean.high_production_priority_mode
            
            # Set aggressive performance targets
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 95
            
            # Maximum execution priority for resource operations
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_execution_priority
              data:
                value: 3
            
            # Trigger peak production maintenance
            - service: script.turn_on
              target:
                entity_id: script.peak_production_maintenance
        
        # Blueprint focus optimization
        - conditions:
            - condition: template
              value_template: "{{ optimization_strategy == 'blueprint_focus' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "BLUEPRINT FOCUS: Optimizing automation blueprint efficiency and coordination"
            
            # Optimize automation complexity for efficiency
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_complexity_level
              data:
                value: 2  # Balanced complexity for efficiency
            
            # Medium-high performance target
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 80
            
            # Trigger automation performance analysis
            - service: script.turn_on
              target:
                entity_id: script.automation_performance_analyzer
        
        # Speed focus optimization
        - conditions:
            - condition: template
              value_template: "{{ optimization_strategy == 'speed_focus' }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.predictive_analytics_log
              data:
                value: "SPEED FOCUS: Optimizing for minimal response times and rapid execution"
            
            # High performance target for speed
            - service: input_number.set_value
              target:
                entity_id: input_number.system_performance_target
              data:
                value: 90
            
            # High execution priority for speed
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_execution_priority
              data:
                value: 3
            
            # Reduce complexity to improve speed
            - service: input_number.set_value
              target:
                entity_id: input_number.automation_complexity_level
              data:
                value: 1
      
      # Balanced optimization - peak efficiency achieved
      default:
        - service: input_text.set_value
          target:
            entity_id: input_text.predictive_analytics_log
          data:
            value: "BALANCED OPTIMIZATION: Peak efficiency achieved - maintaining optimal settings"
        
        # Optimal balanced settings
        - service: input_number.set_value
          target:
            entity_id: input_number.system_performance_target
          data:
            value: 85
        
        - service: input_number.set_value
          target:
            entity_id: input_number.automation_complexity_level
          data:
            value: 3  # Full complexity available
        
        - service: input_number.set_value
          target:
            entity_id: input_number.automation_execution_priority
          data:
            value: 2
    
    # Update efficiency learning confidence
    - service: input_number.set_value
      target:
        entity_id: input_number.prediction_accuracy_score
      data:
        value: >
          {% set current = states('input_number.prediction_accuracy_score') | int %}
          {% set efficiency = composite_efficiency | int %}
          {% if efficiency > 85 %}
            {{ [current + 5, 100] | min }}
          {% elif efficiency > 70 %}
            {{ [current + 2, 100] | min }}
          {% elif efficiency < 50 %}
            {{ [current - 3, 0] | max }}
          {% else %}
            {{ current }}
          {% endif %}
    
    # Efficiency learning notifications
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ composite_efficiency | int > 85 }}"
          sequence:
            - service: notify.mobile_app_tori_phone_2
              data:
                message: "ðŸŽ¯ Efficiency Excellence: {{ composite_efficiency }}% composite efficiency achieved. System performing optimally!"
        - conditions:
            - condition: template
              value_template: "{{ composite_efficiency | int < 60 }}"
          sequence:
            - service: notify.mobile_app_tori_phone_2
              data:
                message: "ðŸ”§ Efficiency Learning: {{ composite_efficiency }}% efficiency. {{ optimization_strategy | title }} optimization applied."
                data:
                  priority: high