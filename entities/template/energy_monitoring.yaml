# Energy Monitoring System - Holtzman Shield Power Management
# Advanced energy analytics and optimization for resource conservation

# ============================================================================
# ENERGY CONSUMPTION ANALYTICS
# ============================================================================

sensor:
  - name: "Holtzman Energy Consumption"
    unique_id: "holtzman_energy_consumption"
    state: >-
      {% set switches = [
        'switch.tp_link_power_strip_173b_couch_lamp',
        'switch.tp_link_power_strip_1446_lamp_by_door', 
        'switch.tp_link_power_strip_1446_cat_bed'
      ] %}
      {% set lights = states.light | selectattr('state', 'eq', 'on') | list %}
      
      {# Base consumption calculation #}
      {% set switch_consumption = switches | select('is_state', 'on') | list | length * 15 %}
      {% set light_consumption = lights | length * 8 %}
      
      {# Time-based consumption modifiers #}
      {% set hour = now().hour %}
      {% if hour >= 18 and hour <= 23 %}
        {% set time_multiplier = 1.3 %}
      {% elif hour >= 6 and hour <= 9 %}
        {% set time_multiplier = 1.2 %}
      {% else %}
        {% set time_multiplier = 0.8 %}
      {% endif %}
      
      {% set total_consumption = (switch_consumption + light_consumption) * time_multiplier %}
      {{ total_consumption | round(1) }}
    unit_of_measurement: "W"
    icon: "mdi:lightning-bolt"
    device_class: power
    attributes:
      switch_power: >-
        {% set switches = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door', 'switch.tp_link_power_strip_1446_cat_bed'] %}
        {{ (switches | select('is_state', 'on') | list | length * 15) }}W
      lighting_power: >-
        {% set lights = states.light | selectattr('state', 'eq', 'on') | list %}
        {{ (lights | length * 8) }}W
      time_factor: >-
        {% set hour = now().hour %}
        {% if hour >= 18 and hour <= 23 %}Peak Evening (130%)
        {% elif hour >= 6 and hour <= 9 %}Morning Rush (120%)
        {% else %}Off-Peak (80%){% endif %}

  - name: "Energy Efficiency Rating"
    unique_id: "energy_efficiency_rating"
    state: >-
      {% set consumption = states('sensor.holtzman_energy_consumption') | float(0) %}
      {% set automation_count = states.automation | selectattr('state', 'eq', 'on') | list | length %}
      {% set total_automations = states.automation | list | length %}
      {% set automation_health = (automation_count / total_automations * 100) if total_automations > 0 else 90 %}

      {# Base efficiency calculation #}
      {% set base_efficiency = 100 - (consumption / 10) %}

      {# Automation health factor #}
      {% set automation_factor = automation_health / 100 %}

      {% set final_efficiency = base_efficiency * automation_factor %}
      {{ final_efficiency | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:leaf"
    device_class: battery
    attributes:
      efficiency_grade: >-
        {% set rating = states('sensor.energy_efficiency_rating') | float(0) %}
        {% if rating >= 95 %}A+{% elif rating >= 90 %}A
        {% elif rating >= 85 %}B+{% elif rating >= 80 %}B
        {% elif rating >= 75 %}C+{% elif rating >= 70 %}C
        {% else %}Needs Improvement{% endif %}
      automation_health: >-
        {% set enabled = states.automation | selectattr('state', 'eq', 'on') | list | length %}
        {% set total = states.automation | list | length %}
        {{ enabled }}/{{ total }} automations active

  - name: "Peak Energy Demand Forecast"
    unique_id: "peak_energy_demand_forecast"
    state: >-
      {% set current_hour = now().hour %}
      {% set day_of_week = now().weekday() %}
      {% set current_consumption = states('sensor.holtzman_energy_consumption') | float(0) %}
      {% set seasonal_factor = 1.0 %}
      
      {# Seasonal adjustments #}
      {% set month = now().month %}
      {% if month in [12, 1, 2] %}
        {% set seasonal_factor = 1.2 %}
      {% elif month in [6, 7, 8] %}
        {% set seasonal_factor = 1.4 %}
      {% endif %}
      
      {# Peak time predictions #}
      {% if current_hour >= 17 and current_hour <= 21 %}
        {% set peak_multiplier = 2.1 %}
      {% elif current_hour >= 6 and current_hour <= 9 %}
        {% set peak_multiplier = 1.8 %}
      {% else %}
        {% set peak_multiplier = 1.2 %}
      {% endif %}
      
      {# Weekend adjustment #}
      {% if day_of_week >= 5 %}
        {% set weekend_factor = 1.15 %}
      {% else %}
        {% set weekend_factor = 1.0 %}
      {% endif %}
      
      {% set forecast = current_consumption * peak_multiplier * seasonal_factor * weekend_factor %}
      {{ forecast | round(1) }}
    unit_of_measurement: "W"
    icon: "mdi:chart-bell-curve"
    attributes:
      next_peak_time: >-
        {% set hour = now().hour %}
        {% if hour < 6 %}06:00 - Morning Peak
        {% elif hour < 17 %}17:00 - Evening Peak
        {% else %}06:00 - Next Morning Peak{% endif %}
      demand_level: >-
        {% set forecast = states('sensor.peak_energy_demand_forecast') | float(0) %}
        {% if forecast < 100 %}Low{% elif forecast < 200 %}Moderate
        {% elif forecast < 300 %}High{% else %}Critical{% endif %}

