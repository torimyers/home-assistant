# Dune-Themed Sophisticated Template Sensors
# Advanced analytics and calculated entities for Sietch monitoring

# ============================================================================
# SIETCH VITALS & SYSTEM HEALTH
# ============================================================================

sensor:
  - name: "Sietch Health Score"
    unique_id: "sietch_health_score"
    state: >-
      {% set base_score = 75 %}
      
      {# Motion sensor health (30% weight) #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set motion_count = 0 %}
      {% for sensor in motion_sensors %}
        {% if states(sensor) != 'unavailable' %}
          {% set motion_count = motion_count + 1 %}
        {% endif %}
      {% endfor %}
      {% set motion_health = (motion_count / motion_sensors | length * 100 * 0.3) if motion_sensors | length > 0 else 0 %}
      
      {# Switch/device health (25% weight) #}  
      {% set switches = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door', 'switch.tp_link_power_strip_1446_cat_bed'] %}
      {% set switch_count = 0 %}
      {% for switch in switches %}
        {% if states(switch) != 'unavailable' %}
          {% set switch_count = switch_count + 1 %}
        {% endif %}
      {% endfor %}
      {% set switch_health = (switch_count / switches | length * 100 * 0.25) if switches | length > 0 else 0 %}
      
      {# Time-based health (20% weight) #}
      {% set hour = now().hour %}
      {% set time_health = (20 if 8 <= hour <= 22 else 15) %}
      
      {# Automation health (25% weight) #}
      {% set automation_count = states.automation | selectattr('state', 'eq', 'on') | list | length %}
      {% set total_automations = states.automation | list | length %}
      {% set automation_health = ((automation_count / total_automations * 100 * 0.25) if total_automations > 0 else 22.5) %}
      
      {% set final_score = base_score + motion_health + switch_health + time_health + automation_health %}
      {{ [final_score, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:shield-check"
    device_class: battery
    attributes:
      motion_sensor_status: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set count = 0 %}
        {% for sensor in sensors %}
          {% if states(sensor) != 'unavailable' %}
            {% set count = count + 1 %}
          {% endif %}
        {% endfor %}
        {{ count }}/{{ sensors | length }} operational
      device_connectivity: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door', 'switch.tp_link_power_strip_1446_cat_bed'] %}
        {% set count = 0 %}
        {% for device in devices %}
          {% if states(device) != 'unavailable' %}
            {% set count = count + 1 %}
          {% endif %}
        {% endfor %}
        {{ count }}/{{ devices | length }} connected
      automation_status: >-
        {% set enabled = states.automation | selectattr('state', 'eq', 'on') | list | length %}
        {% set total = states.automation | list | length %}
        {{ enabled }}/{{ total }} active
      last_assessment: "{{ now().strftime('%H:%M on %b %d') }}"
      status_level: >-
        {% set base_score = 75 %}
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set motion_count = 0 %}
        {% for sensor in motion_sensors %}
          {% if states(sensor) != 'unavailable' %}
            {% set motion_count = motion_count + 1 %}
          {% endif %}
        {% endfor %}
        {% set score = base_score + (motion_count / motion_sensors | length * 25) %}
        {% if score >= 90 %}Optimal
        {% elif score >= 75 %}Good  
        {% elif score >= 60 %}Fair
        {% elif score >= 40 %}Poor
        {% else %}Critical
        {% endif %}

  - name: "Harvester Efficiency"
    unique_id: "harvester_efficiency"
    state: >-
      {% set current_hour = now().hour %}
      {% set base_efficiency = 85 %}
      
      {# Time-based efficiency (peak hours 8-22) #}
      {% set time_factor = 1.2 if 8 <= current_hour <= 22 else 0.8 %}
      
      {# Motion activity factor #}
      {% set motion_entities = [
        'binary_sensor.office_motion',
        'binary_sensor.kitchen_motion',
        'binary_sensor.living_room_motion'
      ] %}
      {% set active_sensors = motion_entities | select('is_state', 'on') | list | length %}
      {% set motion_factor = 1.0 + (active_sensors * 0.15) %}
      
      {# System load factor (inverse of active switches) #}
      {% set switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set load_factor = 1.0 - (switches * 0.05) if switches < 10 else 0.5 %}
      
      {% set efficiency = base_efficiency * time_factor * motion_factor * load_factor %}
      {{ [efficiency, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:factory"
    attributes:
      peak_hours: "08:00 - 22:00"
      current_load: >-
        {{ states.switch | selectattr('state', 'eq', 'on') | list | length }} active devices
      motion_activity: >-
        {% set motion_entities = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ motion_entities | select('is_state', 'on') | list | length }}/{{ motion_entities | length }} zones active
      efficiency_grade: >-
        {% set current_hour = now().hour %}
        {% set base_efficiency = 85 %}
        {% set time_factor = 1.2 if 8 <= current_hour <= 22 else 0.8 %}
        {% set motion_entities = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active_sensors = motion_entities | select('is_state', 'on') | list | length %}
        {% set motion_factor = 1.0 + (active_sensors * 0.15) %}
        {% set switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
        {% set load_factor = 1.0 - (switches * 0.05) if switches < 10 else 0.5 %}
        {% set eff = base_efficiency * time_factor * motion_factor * load_factor %}
        {% if eff >= 95 %}S-Class
        {% elif eff >= 85 %}A-Class
        {% elif eff >= 70 %}B-Class
        {% elif eff >= 55 %}C-Class
        {% else %}D-Class
        {% endif %}

  - name: "Water Conservation Index"
    unique_id: "water_conservation_index"  
    state: >-
      {% set base_conservation = 78 %}
      {% set current_hour = now().hour %}
      
      {# Night bonus (22:00 - 06:00) #}
      {% set night_bonus = 15 if current_hour >= 22 or current_hour <= 6 else 0 %}
      
      {# Low activity bonus #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set active_motion = motion_sensors | select('is_state', 'on') | list | length %}
      {% set activity_bonus = 10 if active_motion <= 1 else (5 if active_motion == 2 else 0) %}
      
      {# Energy efficiency factor #}
      {% set active_switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set energy_penalty = active_switches * 2 %}
      
      {% set conservation = base_conservation + night_bonus + activity_bonus - energy_penalty %}
      {{ [conservation, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    attributes:
      night_mode_active: "{{ 'Yes' if now().hour >= 22 or now().hour <= 6 else 'No' }}"
      active_consumption: >-
        {{ states.switch | selectattr('state', 'eq', 'on') | list | length }} devices drawing power
      conservation_level: >-
        {% set base_conservation = 75 %}
        {% set night_bonus = 10 if now().hour >= 22 or now().hour <= 6 else 0 %}
        {% set motion_entities = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active_zones = motion_entities | select('is_state', 'on') | list | length %}
        {% set activity_bonus = active_zones * 5 %}
        {% set energy_devices = states.switch | selectattr('state', 'eq', 'on') | list | length %}
        {% set energy_penalty = energy_devices * 2 %}
        {% set index = base_conservation + night_bonus + activity_bonus - energy_penalty %}
        {% if index >= 90 %}Desert Master
        {% elif index >= 75 %}Fremen Initiate
        {% elif index >= 60 %}Adaptation Learning
        {% elif index >= 45 %}Water Waste Detected
        {% else %}Critical Conservation Required
        {% endif %}
      daily_target: "85% minimum conservation"

  - name: "Spice Production Level"
    unique_id: "spice_production_level"
    state: >-
      {% set automations_total = states.automation | list | length %}
      {% set automations_active = states.automation | selectattr('state', 'eq', 'on') | list | length %}
      {% set automation_ratio = (automations_active / automations_total) if automations_total > 0 else 0 %}
      
      {# Base production from automation success #}
      {% set base_production = automation_ratio * 100 %}
      
      {# Activity multiplier #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set motion_activity = motion_sensors | select('is_state', 'on') | list | length %}
      {% set activity_multiplier = 1.0 + (motion_activity * 0.1) %}
      
      {# Time of day factor #}
      {% set hour = now().hour %}
      {% set time_factor = 1.3 if 6 <= hour <= 9 or 17 <= hour <= 21 else (1.1 if 10 <= hour <= 16 else 0.7) %}
      
      {% set production = base_production * activity_multiplier * time_factor %}
      {{ production | round(1) }}
    unit_of_measurement: "units"
    icon: "mdi:shimmer"
    attributes:
      automation_efficiency: "{{ states.automation | selectattr('state', 'eq', 'on') | list | length }}/{{ states.automation | list | length }}"
      peak_production_times: "06:00-09:00, 17:00-21:00"
      current_yield: >-
        {% set base_production = 90 %}
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active_sensors = motion_sensors | select('is_state', 'on') | list | length %}
        {% set activity_multiplier = 1.0 + (active_sensors * 0.1) %}
        {% set hour = now().hour %}
        {% set time_factor = 1.3 if 6 <= hour <= 9 or 17 <= hour <= 21 else (1.1 if 10 <= hour <= 16 else 0.7) %}
        {% set level = base_production * activity_multiplier * time_factor %}
        {% if level >= 120 %}Maximum Yield
        {% elif level >= 100 %}High Yield
        {% elif level >= 80 %}Standard Yield
        {% elif level >= 60 %}Below Standard
        {% else %}Production Failure
        {% endif %}
      guild_rating: >-
        {% set base_production = 90 %}
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active_sensors = motion_sensors | select('is_state', 'on') | list | length %}
        {% set activity_multiplier = 1.0 + (active_sensors * 0.1) %}
        {% set hour = now().hour %}
        {% set time_factor = 1.3 if 6 <= hour <= 9 or 17 <= hour <= 21 else (1.1 if 10 <= hour <= 16 else 0.7) %}
        {% set level = base_production * activity_multiplier * time_factor %}
        {% if level >= 130 %}Guild Navigator
        {% elif level >= 110 %}Mentat Level
        {% elif level >= 90 %}Bene Gesserit
        {% elif level >= 70 %}House Minor
        {% else %}Unranked
        {% endif %}

  - name: "Desert Survival Status"
    unique_id: "desert_survival_status"
    state: >-
      {% set critical_systems = [
        'binary_sensor.house_occupied',
        'input_boolean.system_health_monitoring'
      ] %}
      {% set operational_systems = critical_systems | select('is_state', 'on') | list | length %}
      {% set total_systems = critical_systems | length %}
      
      {# Motion sensor redundancy #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set working_motion = motion_sensors | reject('is_state', 'unavailable') | list | length %}
      {% set motion_redundancy = (working_motion >= 2) %}
      
      {# Power distribution #}
      {% set power_devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
      {% set working_power = power_devices | reject('is_state', 'unavailable') | list | length %}
      {% set power_redundancy = (working_power >= 1) %}
      
      {% if operational_systems == total_systems and motion_redundancy and power_redundancy %}
        Thriving
      {% elif operational_systems >= (total_systems * 0.8) and (motion_redundancy or power_redundancy) %}
        Stable
      {% elif operational_systems >= (total_systems * 0.6) %}
        Surviving
      {% elif operational_systems >= (total_systems * 0.4) %}
        Stressed
      {% else %}
        Critical
      {% endif %}
    icon: "mdi:shield-cross"
    attributes:
      critical_systems: >-
        {% set systems = ['binary_sensor.house_occupied', 'input_boolean.system_health_monitoring'] %}
        {{ systems | select('is_state', 'on') | list | length }}/{{ systems | length }} online
      motion_redundancy: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ sensors | reject('is_state', 'unavailable') | list | length }}/{{ sensors | length }} operational
      power_distribution: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
        {{ devices | reject('is_state', 'unavailable') | list | length }}/{{ devices | length }} connected
      survival_rating: >-
        {% set status = states('sensor.desert_survival_status') %}
        {% if status == 'Thriving' %}⭐⭐⭐⭐⭐
        {% elif status == 'Stable' %}⭐⭐⭐⭐
        {% elif status == 'Surviving' %}⭐⭐⭐
        {% elif status == 'Stressed' %}⭐⭐
        {% else %}⭐
        {% endif %}

  # ============================================================================
  # MOTION & PRESENCE ANALYTICS  
  # ============================================================================

  - name: "Fremen Activity Level"
    unique_id: "fremen_activity_level"
    state: >-
      {% set motion_sensors = [
        'binary_sensor.office_motion',
        'binary_sensor.kitchen_motion',
        'binary_sensor.living_room_motion'
      ] %}
      {% set active_zones = motion_sensors | select('is_state', 'on') | list | length %}
      {% set total_zones = motion_sensors | length %}
      
      {# Base activity calculation #}
      {% set base_activity = (active_zones / total_zones) * 100 %}
      
      {# Time-based adjustments #}
      {% set hour = now().hour %}
      {% set time_multiplier = 1.5 if 6 <= hour <= 9 or 17 <= hour <= 22 else (1.2 if 10 <= hour <= 16 else 0.6) %}
      
      {# Device usage factor #}
      {% set active_devices = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set device_factor = 1.0 + (active_devices * 0.1) %}
      
      {% set activity = base_activity * time_multiplier * device_factor %}
      {{ [activity, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:run-fast"
    attributes:
      active_zones: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ sensors | select('is_state', 'on') | list | length }}/{{ sensors | length }}
      peak_activity_periods: "06:00-09:00, 17:00-22:00"
      current_period: >-
        {% set hour = now().hour %}
        {% if 6 <= hour <= 9 %}Morning Ritual
        {% elif 10 <= hour <= 16 %}Day Patrol
        {% elif 17 <= hour <= 22 %}Evening Gathering
        {% else %}Night Watch
        {% endif %}
      tribal_status: >-
        {% set activity = states('sensor.fremen_activity_level') | float %}
        {% if activity >= 80 %}Full Sietch Activity
        {% elif activity >= 60 %}Moderate Movement
        {% elif activity >= 40 %}Quiet Patrol
        {% elif activity >= 20 %}Minimal Presence
        {% else %}Dormant Period
        {% endif %}

  - name: "Sietch Occupancy Distribution"
    unique_id: "sietch_occupancy_distribution"
    state: >-
      {% set zones = [
        {'name': 'Office', 'sensor': 'binary_sensor.office_motion'},
        {'name': 'Kitchen', 'sensor': 'binary_sensor.kitchen_motion'},
        {'name': 'Living Room', 'sensor': 'binary_sensor.living_room_motion'}
      ] %}
      {% set active_zones = zones | selectattr('sensor', 'is_state', 'on') | list %}
      {% set primary_zone = active_zones | first %}
      {{ primary_zone.name if primary_zone else 'No Primary Zone' }}
    icon: "mdi:home-analytics"
    attributes:
      zone_status: >-
        {%- set zones = [
          {'name': 'Office', 'sensor': 'binary_sensor.office_motion'},
          {'name': 'Kitchen', 'sensor': 'binary_sensor.kitchen_motion'}, 
          {'name': 'Living Room', 'sensor': 'binary_sensor.living_room_motion'}
        ] -%}
        {%- for zone in zones -%}
          {{ zone.name }}: {{ 'Active' if is_state(zone.sensor, 'on') else 'Quiet' }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
      most_active_zone: >-
        {% set zones = [
          {'name': 'Office', 'sensor': 'binary_sensor.office_motion'},
          {'name': 'Kitchen', 'sensor': 'binary_sensor.kitchen_motion'},
          {'name': 'Living Room', 'sensor': 'binary_sensor.living_room_motion'}
        ] %}
        {% set active_zones = zones | selectattr('sensor', 'is_state', 'on') | list %}
        {{ active_zones[0].name if active_zones else 'None' }}
      activity_distribution: >-
        {% set zones = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active = zones | select('is_state', 'on') | list | length %}
        {% set total = zones | length %}
        {{ (active/total*100) | round }}% zones active

  - name: "Motion Pattern Analysis"
    unique_id: "motion_pattern_analysis"
    state: >-
      {% set hour = now().hour %}
      {% set motion_sensors = [
        'binary_sensor.office_motion',
        'binary_sensor.kitchen_motion', 
        'binary_sensor.living_room_motion'
      ] %}
      {% set active_count = motion_sensors | select('is_state', 'on') | list | length %}
      
      {% if active_count == 0 %}
        Dormant
      {% elif active_count == 1 %}
        Focused
      {% elif active_count == 2 %}
        Distributed
      {% else %}
        Full Activity
      {% endif %}
    icon: "mdi:chart-line"
    attributes:
      pattern_type: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active = sensors | select('is_state', 'on') | list | length %}
        {% if active >= 3 %}Multi-Zone
        {% elif active == 2 %}Dual-Zone
        {% elif active == 1 %}Single-Zone
        {% else %}Inactive
        {% endif %}
      efficiency_score: >-
        {% set hour = now().hour %}
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active = sensors | select('is_state', 'on') | list | length %}
        {% set expected = 2 if 8 <= hour <= 17 else 1 %}
        {{ (((active/expected)*100) | min(100)) | round }}% efficiency
      time_analysis: >-
        {% set hour = now().hour %}
        {% if 6 <= hour <= 8 %}Morning Awakening
        {% elif 9 <= hour <= 11 %}Morning Activity
        {% elif 12 <= hour <= 13 %}Midday Rest
        {% elif 14 <= hour <= 17 %}Afternoon Work
        {% elif 18 <= hour <= 21 %}Evening Gathering
        {% elif 22 <= hour <= 23 %}Night Preparation
        {% else %}Deep Night
        {% endif %}

  # ============================================================================
  # ENVIRONMENTAL MONITORING
  # ============================================================================

  - name: "Atmospheric Conditions"
    unique_id: "atmospheric_conditions"
    state: >-
      {% set base_stability = 85 %}
      {% set hour = now().hour %}
      
      {# Time-based atmospheric factors #}
      {% set time_factor = 1.1 if 6 <= hour <= 18 else 0.95 %}
      
      {# Activity-based air circulation #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set active_zones = motion_sensors | select('is_state', 'on') | list | length %}
      {% set circulation_factor = 1.0 + (active_zones * 0.05) %}
      
      {# Device heat generation #}
      {% set active_devices = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set heat_factor = 1.0 - (active_devices * 0.02) %}
      
      {% set conditions = base_stability * time_factor * circulation_factor * heat_factor %}
      {{ conditions | round(1) }}
    unit_of_measurement: "index"
    icon: "mdi:weather-partly-cloudy"
    attributes:
      atmosphere_quality: >-
        {% set index = states('sensor.atmospheric_conditions') | float %}
        {% if index >= 90 %}Optimal Desert Air
        {% elif index >= 80 %}Good Circulation
        {% elif index >= 70 %}Adequate Ventilation
        {% elif index >= 60 %}Stale Air Detected
        {% else %}Poor Air Quality
        {% endif %}
      circulation_zones: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ sensors | select('is_state', 'on') | list | length }} active zones promoting air flow
      heat_sources: "{{ states.switch | selectattr('state', 'eq', 'on') | list | length }} active heat-generating devices"
      daily_peak: "14:00 - 16:00 (highest atmospheric pressure)"

  - name: "Energy Shield Status"  
    unique_id: "energy_shield_status"
    state: >-
      {% set critical_devices = [
        'switch.tp_link_power_strip_173b_couch_lamp',
        'switch.tp_link_power_strip_1446_lamp_by_door',
        'switch.tp_link_power_strip_1446_cat_bed'
      ] %}
      {% set operational_shields = critical_devices | reject('is_state', 'unavailable') | list | length %}
      {% set total_shields = critical_devices | length %}
      {% set shield_percentage = (operational_shields / total_shields * 100) if total_shields > 0 else 0 %}
      
      {# Power efficiency calculation #}
      {% set active_count = critical_devices | select('is_state', 'on') | list | length %}
      {% set efficiency_factor = 100 - (active_count * 15) if active_count <= 4 else 40 %}
      
      {% set final_status = (shield_percentage * 0.7) + (efficiency_factor * 0.3) %}
      {{ final_status | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:shield-check"
    device_class: battery
    attributes:
      shield_generators: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door', 'switch.tp_link_power_strip_1446_cat_bed'] %}
        {{ devices | reject('is_state', 'unavailable') | list | length }}/{{ devices | length }} operational
      power_consumption: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door', 'switch.tp_link_power_strip_1446_cat_bed'] %}
        {{ devices | select('is_state', 'on') | list | length }} shields drawing power
      shield_strength: >-
        {% set status = states('sensor.energy_shield_status') | float %}
        {% if status >= 90 %}Maximum Protection
        {% elif status >= 75 %}Strong Shield
        {% elif status >= 60 %}Moderate Shield
        {% elif status >= 40 %}Weak Shield  
        {% else %}Shield Failing
        {% endif %}
      emergency_protocol: >-
        {% set status = states('sensor.energy_shield_status') | float %}
        {{ 'Active' if status < 50 else 'Standby' }}

  # ============================================================================
  # AUTOMATION INTELLIGENCE
  # ============================================================================

  - name: "Automation Success Rate"
    unique_id: "automation_success_rate"  
    state: >-
      {% set total_automations = states.automation | list | length %}
      {% set enabled_automations = states.automation | selectattr('state', 'eq', 'on') | list | length %}
      {% set success_rate = (enabled_automations / total_automations * 100) if total_automations > 0 else 0 %}
      
      {# Recent execution factor (simulated based on current activity) #}
      {% set motion_activity = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] | select('is_state', 'on') | list | length %}
      {% set execution_bonus = motion_activity * 5 %}
      
      {% set final_rate = success_rate + execution_bonus %}
      {{ [final_rate, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:robot"
    attributes:
      total_automations: "{{ states.automation | list | length }}"
      enabled_automations: "{{ states.automation | selectattr('state', 'eq', 'on') | list | length }}" 
      disabled_automations: "{{ states.automation | selectattr('state', 'eq', 'off') | list | length }}"
      success_grade: >-
        {% set total_automations = states.automation | list | length %}
        {% set enabled_automations = states.automation | selectattr('state', 'eq', 'on') | list | length %}
        {% set rate = (enabled_automations / total_automations * 100) if total_automations > 0 else 0 %}
        {% if rate >= 95 %}Master Mentat
        {% elif rate >= 85 %}Advanced AI
        {% elif rate >= 75 %}Standard Logic
        {% elif rate >= 60 %}Basic Function
        {% else %}System Error
        {% endif %}
      recent_activity: >-
        {% set motion = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] | select('is_state', 'on') | list | length %}
        {{ motion }} automation triggers currently active

  - name: "Blueprint Efficiency Score"
    unique_id: "blueprint_efficiency_score"
    state: >-
      {% set motion_blueprints = [
        'motion_lighting_kitchen.yaml',
        'motion_lighting_living_room.yaml', 
        'motion_lighting_office.yaml'
      ] %}
      
      {# Simulated efficiency based on motion sensor responsiveness #}
      {% set motion_sensors = ['binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion', 'binary_sensor.office_motion'] %}
      {% set responsive_sensors = motion_sensors | reject('is_state', 'unavailable') | list | length %}
      {% set sensor_efficiency = (responsive_sensors / motion_sensors | length * 100) if motion_sensors | length > 0 else 0 %}
      
      {# Time-based performance adjustment #}
      {% set hour = now().hour %}
      {% set time_efficiency = 100 if 8 <= hour <= 22 else 85 %}
      
      {# System load impact #}
      {% set active_switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set load_penalty = active_switches * 2 if active_switches > 5 else 0 %}
      
      {% set efficiency = ((sensor_efficiency * 0.6) + (time_efficiency * 0.4)) - load_penalty %}
      {{ [efficiency, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:file-cog"
    attributes:
      motion_blueprints: "3 active motion lighting blueprints"
      sensor_responsiveness: >-
        {% set sensors = ['binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion', 'binary_sensor.office_motion'] %}
        {{ sensors | reject('is_state', 'unavailable') | list | length }}/{{ sensors | length }} sensors responsive
      optimal_hours: "08:00 - 22:00"
      efficiency_rating: >-
        {% set score = states('sensor.blueprint_efficiency_score') | float %}
        {% if score >= 95 %}Perfect Execution
        {% elif score >= 85 %}High Performance
        {% elif score >= 70 %}Good Performance
        {% elif score >= 55 %}Acceptable
        {% else %}Needs Optimization
        {% endif %}

  - name: "Night Security Effectiveness"
    unique_id: "night_security_effectiveness"
    state: >-
      {% set hour = now().hour %}
      {% set is_night = hour >= 22 or hour <= 6 %}
      
      {% if is_night %}
        {# Night mode calculations #}
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active_sensors = motion_sensors | reject('is_state', 'unavailable') | list | length %}
        {% set sensor_coverage = (active_sensors / motion_sensors | length * 100) if motion_sensors | length > 0 else 0 %}
        
        {# Security device status #}
        {% set security_devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
        {% set operational_devices = security_devices | reject('is_state', 'unavailable') | list | length %}
        {% set device_readiness = (operational_devices / security_devices | length * 100) if security_devices | length > 0 else 0 %}
        
        {% set effectiveness = (sensor_coverage * 0.7) + (device_readiness * 0.3) %}
        {{ effectiveness | round(1) }}
      {% else %}
        {# Day mode - reduced effectiveness score #}
        85.0
      {% endif %}
    unit_of_measurement: "%"
    icon: "mdi:shield-moon"
    attributes:
      security_mode: >-
        {% set hour = now().hour %}
        {{ 'Night Watch Active' if hour >= 22 or hour <= 6 else 'Day Patrol Mode' }}
      sensor_network: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ sensors | reject('is_state', 'unavailable') | list | length }}/{{ sensors | length }} perimeter sensors active
      response_devices: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
        {{ devices | reject('is_state', 'unavailable') | list | length }}/{{ devices | length }} response devices ready
      threat_level: >-
        {% set effectiveness = states('sensor.night_security_effectiveness') | float(0) %}
        {% if effectiveness >= 90 %}Fortress Secured
        {% elif effectiveness >= 80 %}High Security
        {% elif effectiveness >= 70 %}Standard Guard
        {% elif effectiveness >= 60 %}Reduced Protection
        {% else %}Vulnerability Detected
        {% endif %}

  - name: "Morning Ritual Completion"
    unique_id: "morning_ritual_completion"
    state: >-
      {% set hour = now().hour %}
      {% set is_morning = 5 <= hour <= 10 %}
      
      {% if is_morning %}
        {# Morning ritual progress based on activity #}
        {% set morning_zones = ['binary_sensor.kitchen_motion', 'binary_sensor.office_motion'] %}
        {% set active_zones = morning_zones | select('is_state', 'on') | list | length %}
        {% set zone_completion = (active_zones / morning_zones | length * 50) if morning_zones | length > 0 else 0 %}
        
        {# Device activation progress #}
        {% set morning_devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
        {% set active_devices = morning_devices | select('is_state', 'on') | list | length %}
        {% set device_completion = (active_devices / morning_devices | length * 50) if morning_devices | length > 0 else 0 %}
        
        {% set completion = zone_completion + device_completion %}
        {{ [completion, 100] | min | round(1) }}
      {% else %}
        {# Outside morning hours #}
        {% if hour > 10 %}100.0{% else %}0.0{% endif %}
      {% endif %}
    unit_of_measurement: "%"
    icon: "mdi:weather-sunrise"
    attributes:
      ritual_phase: >-
        {% set hour = now().hour %}
        {% if 5 <= hour <= 6 %}Pre-Dawn Preparation
        {% elif 7 <= hour <= 8 %}Dawn Awakening
        {% elif 9 <= hour <= 10 %}Morning Activation
        {% elif hour > 10 %}Ritual Complete
        {% else %}Night Rest
        {% endif %}
      zone_activation: >-
        {% set zones = ['binary_sensor.kitchen_motion', 'binary_sensor.office_motion'] %}
        {{ zones | select('is_state', 'on') | list | length }}/{{ zones | length }} morning zones active
      device_readiness: >-
        {% set devices = ['switch.tp_link_power_strip_173b_couch_lamp', 'switch.tp_link_power_strip_1446_lamp_by_door'] %}
        {{ devices | select('is_state', 'on') | list | length }}/{{ devices | length }} devices activated
      completion_status: >-
        {% set completion = states('sensor.morning_ritual_completion') | float %}
        {% if completion == 100 %}Ritual Complete
        {% elif completion >= 75 %}Nearly Finished
        {% elif completion >= 50 %}In Progress
        {% elif completion >= 25 %}Beginning
        {% else %}Not Started
        {% endif %}

  - name: "System Response Time"
    unique_id: "system_response_time"
    state: >-
      {% set base_response = 95 %}
      
      {# System load factor #}
      {% set active_switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
      {% set load_penalty = active_switches * 1.5 if active_switches > 8 else 0 %}
      
      {# Sensor responsiveness #}
      {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
      {% set responsive_sensors = motion_sensors | reject('is_state', 'unavailable') | list | length %}
      {% set sensor_bonus = (responsive_sensors / motion_sensors | length * 10) if motion_sensors | length > 0 else 0 %}
      
      {# Time of day factor #}
      {% set hour = now().hour %}
      {% set time_penalty = 0 if 8 <= hour <= 20 else 5 %}
      
      {% set response_score = base_response + sensor_bonus - load_penalty - time_penalty %}
      {{ [response_score, 100] | min | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:speedometer"
    attributes:
      current_load: "{{ states.switch | selectattr('state', 'eq', 'on') | list | length }} active processes"
      sensor_network: >-
        {% set sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {{ sensors | reject('is_state', 'unavailable') | list | length }}/{{ sensors | length }} sensors responding
      response_grade: >-
        {% set base_response = 95 %}
        {% set active_switches = states.switch | selectattr('state', 'eq', 'on') | list | length %}
        {% set load_penalty = active_switches * 1.5 if active_switches > 8 else 0 %}
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set responsive_sensors = motion_sensors | reject('is_state', 'unavailable') | list | length %}
        {% set sensor_bonus = (responsive_sensors / motion_sensors | length * 10) if motion_sensors | length > 0 else 0 %}
        {% set hour = now().hour %}
        {% set time_penalty = 0 if 8 <= hour <= 20 else 5 %}
        {% set time = base_response + sensor_bonus - load_penalty - time_penalty %}
        {% if time >= 95 %}Instantaneous
        {% elif time >= 85 %}Very Fast
        {% elif time >= 75 %}Fast
        {% elif time >= 65 %}Moderate
        {% elif time >= 50 %}Slow
        {% else %}Sluggish
        {% endif %}
      optimal_conditions: "Low system load, daylight hours, all sensors operational"