# Advanced Template Sensor Analytics - Dune Intelligence Network
# Sophisticated calculations, predictive analytics, and AI-level insights

# ============================================================================
# PREDICTIVE ANALYTICS & FORECASTING
# ============================================================================

sensor:
  - name: "Spice Harvester Efficiency Trend"
    unique_id: "spice_harvester_efficiency_trend"
    state: >-
      {% set current = states('sensor.spice_production_level') | float(0) %}
      {% set history = state_attr('sensor.spice_harvester_efficiency_trend', 'readings') or [] %}
      {% set new_readings = (history + [current])[-10:] %}
      
      {% if new_readings | length >= 3 %}
        {% set trend = 0 %}
        {% for i in range(1, new_readings | length) %}
          {% set trend = trend + (new_readings[i] - new_readings[i-1]) %}
        {% endfor %}
        {% set avg_trend = trend / (new_readings | length - 1) %}
        {% set predicted_next = current + (avg_trend * 2) %}
        {{ predicted_next | round(1) }}
      {% else %}
        {{ current }}
      {% endif %}
    unit_of_measurement: "%"
    icon: "mdi:trending-up"
    attributes:
      readings: >-
        {% set current = states('sensor.spice_production_level') | float(0) %}
        {% set history = state_attr('sensor.spice_harvester_efficiency_trend', 'readings') or [] %}
        {{ (history + [current])[-10:] }}
      trend_direction: >-
        {% set current = states('sensor.spice_production_level') | float(0) %}
        {% set history = state_attr('sensor.spice_harvester_efficiency_trend', 'readings') or [] %}
        {% if history | length >= 2 %}
          {% if current > history[-1] %}Increasing{% elif current < history[-1] %}Decreasing{% else %}Stable{% endif %}
        {% else %}
          Unknown
        {% endif %}

  - name: "Fremen Activity Correlation Index"
    unique_id: "fremen_activity_correlation_index"
    state: >-
      {% set motion_sensors = [
        'binary_sensor.office_motion',
        'binary_sensor.kitchen_motion', 
        'binary_sensor.living_room_motion'
      ] %}
      {% set time_of_day = now().hour %}
      {% set day_of_week = now().weekday() %}
      
      {# Calculate motion activity score #}
      {% set active_sensors = motion_sensors | select('is_state', 'on') | list | length %}
      {% set motion_score = (active_sensors / motion_sensors | length) * 100 %}
      
      {# Time-based activity expectation #}
      {% if time_of_day >= 7 and time_of_day <= 9 %}
        {% set expected_activity = 85 %}
      {% elif time_of_day >= 10 and time_of_day <= 16 %}
        {% set expected_activity = 60 %}
      {% elif time_of_day >= 17 and time_of_day <= 22 %}
        {% set expected_activity = 90 %}
      {% else %}
        {% set expected_activity = 15 %}
      {% endif %}
      
      {# Weekend adjustment #}
      {% if day_of_week >= 5 %}
        {% set expected_activity = expected_activity * 1.2 %}
      {% endif %}
      
      {# Correlation calculation #}
      {% set correlation = (motion_score / expected_activity) * 100 %}
      {{ correlation | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:chart-line-variant"
    attributes:
      motion_score: >-
        {% set motion_sensors = ['binary_sensor.office_motion', 'binary_sensor.kitchen_motion', 'binary_sensor.living_room_motion'] %}
        {% set active = motion_sensors | select('is_state', 'on') | list | length %}
        {{ (active / motion_sensors | length * 100) | round(1) }}%
      expected_activity: >-
        {% set time_of_day = now().hour %}
        {% if time_of_day >= 7 and time_of_day <= 9 %}85%
        {% elif time_of_day >= 10 and time_of_day <= 16 %}60%
        {% elif time_of_day >= 17 and time_of_day <= 22 %}90%
        {% else %}15%{% endif %}

  # ============================================================================
  # RESOURCE OPTIMIZATION & EFFICIENCY
  # ============================================================================

  - name: "Water Reclamation Efficiency"
    unique_id: "water_reclamation_efficiency"
    state: >-
      {% set base_conservation = states('sensor.water_conservation_index') | float(75) %}
      {% set current_hour = now().hour %}
      {% set temperature = states('weather.home') | state_attr('temperature') or 72 %}
      {% set humidity = states('weather.home') | state_attr('humidity') or 50 %}
      
      {# Environmental factors #}
      {% set temp_factor = 1.0 %}
      {% if temperature > 80 %}
        {% set temp_factor = 1.15 %}
      {% elif temperature < 60 %}
        {% set temp_factor = 0.9 %}
      {% endif %}
      
      {% set humidity_factor = 1.0 %}
      {% if humidity < 30 %}
        {% set humidity_factor = 1.2 %}
      {% elif humidity > 70 %}
        {% set humidity_factor = 0.85 %}
      {% endif %}
      
      {# Time-based efficiency #}
      {% set time_factor = 1.0 %}
      {% if current_hour >= 22 or current_hour <= 6 %}
        {% set time_factor = 1.1 %}
      {% endif %}
      
      {% set efficiency = base_conservation * temp_factor * humidity_factor * time_factor %}
      {{ efficiency | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:water-sync"
    device_class: battery
    attributes:
      temperature_impact: >-
        {% set temp = states('weather.home') | state_attr('temperature') or 72 %}
        {% if temp > 80 %}High evaporation (+15%)
        {% elif temp < 60 %}Low evaporation (-10%)
        {% else %}Optimal conditions{% endif %}
      humidity_impact: >-
        {% set humidity = states('weather.home') | state_attr('humidity') or 50 %}
        {% if humidity < 30 %}High reclamation (+20%)
        {% elif humidity > 70 %}Low reclamation (-15%)
        {% else %}Normal conditions{% endif %}

  - name: "Energy Shield Optimization Score"
    unique_id: "energy_shield_optimization_score"
    state: >-
      {% set base_shield = states('sensor.energy_shield_status') | float(60) %}
      {% set solar_hour = now().hour %}
      {% set is_weekend = now().weekday() >= 5 %}
      {% set house_occupied = is_state('binary_sensor.house_occupied', 'on') %}
      
      {# Solar optimization (theoretical peak times) #}
      {% set solar_factor = 1.0 %}
      {% if solar_hour >= 10 and solar_hour <= 16 %}
        {% set solar_factor = 1.3 %}
      {% elif solar_hour >= 8 and solar_hour <= 18 %}
        {% set solar_factor = 1.15 %}
      {% endif %}
      
      {# Occupancy-based optimization #}
      {% set occupancy_factor = 1.0 %}
      {% if house_occupied %}
        {% set occupancy_factor = 0.95 %}
      {% else %}
        {% set occupancy_factor = 1.1 %}
      {% endif %}
      
      {# Weekend efficiency boost #}
      {% set weekend_factor = 1.05 if is_weekend else 1.0 %}
      
      {% set optimized_score = base_shield * solar_factor * occupancy_factor * weekend_factor %}
      {{ optimized_score | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:shield-sync"
    device_class: battery
    attributes:
      solar_optimization: >-
        {% set hour = now().hour %}
        {% if hour >= 10 and hour <= 16 %}Peak solar (+30%)
        {% elif hour >= 8 and hour <= 18 %}Good solar (+15%)
        {% else %}No solar benefit{% endif %}
      occupancy_factor: >-
        {{ 'Reduced efficiency (-5%)' if is_state('binary_sensor.house_occupied', 'on') else 'Enhanced efficiency (+10%)' }}

  # ============================================================================
  # COMPLEX SYSTEM ANALYTICS
  # ============================================================================

  - name: "Sietch Operational Intelligence"
    unique_id: "sietch_operational_intelligence"
    state: >-
      {% set health = states('sensor.sietch_health_score') | float(0) %}
      {% set activity = states('sensor.fremen_activity_level') | float(0) %}
      {% set water = states('sensor.water_conservation_index') | float(0) %}
      {% set energy = states('sensor.energy_shield_status') | float(0) %}
      {% set automation = states('sensor.automation_success_rate') | float(0) %}
      
      {# Weighted intelligence score #}
      {% set intelligence = (
        health * 0.25 + 
        activity * 0.20 + 
        water * 0.20 + 
        energy * 0.15 + 
        automation * 0.20
      ) %}
      
      {# Bonus for high performance across all metrics #}
      {% set high_performers = [health, activity, water, energy, automation] | select('>', 85) | list | length %}
      {% set bonus = high_performers * 2 if high_performers >= 4 else 0 %}
      
      {{ (intelligence + bonus) | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:brain"
    device_class: battery
    attributes:
      performance_grade: >-
        {% set score = states('sensor.sietch_operational_intelligence') | float(0) %}
        {% if score >= 95 %}Legendary Mentat
        {% elif score >= 90 %}Master Strategist
        {% elif score >= 85 %}Skilled Analyst
        {% elif score >= 75 %}Competent Operator
        {% elif score >= 65 %}Learning Apprentice
        {% else %}Needs Training{% endif %}
      high_performance_systems: >-
        {% set metrics = {
          'Health': states('sensor.sietch_health_score') | float(0),
          'Activity': states('sensor.fremen_activity_level') | float(0),
          'Water': states('sensor.water_conservation_index') | float(0),
          'Energy': states('sensor.energy_shield_status') | float(0),
          'Automation': states('sensor.automation_success_rate') | float(0)
        } %}
        {{ metrics | selectattr('value', '>', 85) | map(attribute='key') | list | join(', ') or 'None' }}

  - name: "Dune Prescience Forecast"
    unique_id: "dune_prescience_forecast"
    state: >-
      {% set current_time = now() %}
      {% set hour = current_time.hour %}
      {% set day_of_week = current_time.weekday() %}
      {% set month = current_time.month %}
      
      {# Environmental predictions #}
      {% set temp_trend = states('weather.home') | state_attr('temperature') or 72 %}
      {% set season_factor = 1.0 %}
      {% if month in [12, 1, 2] %}
        {% set season_factor = 0.85 %}
      {% elif month in [6, 7, 8] %}
        {% set season_factor = 1.15 %}
      {% endif %}
      
      {# Activity predictions #}
      {% set activity_forecast = 50 %}
      {% if hour >= 7 and hour <= 9 %}
        {% set activity_forecast = 85 %}
      {% elif hour >= 17 and hour <= 21 %}
        {% set activity_forecast = 90 %}
      {% elif hour >= 22 or hour <= 6 %}
        {% set activity_forecast = 20 %}
      {% else %}
        {% set activity_forecast = 60 %}
      {% endif %}
      
      {# Weekend adjustment #}
      {% if day_of_week >= 5 %}
        {% set activity_forecast = activity_forecast * 0.8 %}
      {% endif %}
      
      {# Complex prescience calculation #}
      {% set prescience = (activity_forecast * season_factor * 
        (1 + (states('sensor.sietch_operational_intelligence') | float(0) / 100))) %}
      {{ prescience | round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:crystal-ball"
    attributes:
      next_hour_prediction: >-
        {% set next_hour = (now().hour + 1) % 24 %}
        {% if next_hour >= 7 and next_hour <= 9 %}High Activity Expected
        {% elif next_hour >= 17 and next_hour <= 21 %}Peak Activity Expected
        {% elif next_hour >= 22 or next_hour <= 6 %}Low Activity Expected
        {% else %}Moderate Activity Expected{% endif %}
      confidence_level: >-
        {% set intelligence = states('sensor.sietch_operational_intelligence') | float(0) %}
        {% if intelligence >= 90 %}Very High (95%)
        {% elif intelligence >= 80 %}High (85%)
        {% elif intelligence >= 70 %}Moderate (70%)
        {% else %}Low (50%){% endif %}
      temporal_factors: >-
        {% set hour = now().hour %}
        {% set weekend = 'Weekend' if now().weekday() >= 5 else 'Weekday' %}
        {% set season = ['Winter', 'Winter', 'Spring', 'Spring', 'Spring', 'Summer', 'Summer', 'Summer', 'Fall', 'Fall', 'Fall', 'Winter'][now().month - 1] %}
        {{ weekend }} {{ season }}, Hour {{ hour }}